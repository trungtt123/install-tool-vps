LavaPack.loadBundle([[89,{"../../../../shared/constants/app":4047,"../../../../shared/constants/gas":4052,"../../../../shared/constants/metametrics":4057,"../../../../shared/constants/transaction":4070,"../../../../shared/lib/transactions-controller-utils":4078,"../../../../shared/modules/conversion.utils":4084,"../../../../shared/modules/transaction.utils":4100,"../../../../ui/helpers/utils/metrics":4783,"../snap-keyring/metrics":85,"@metamask/eth-query":1100,"@metamask/transaction-controller":1724,"bignumber.js":2335,"ethereumjs-util":2798},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.handleTransactionSubmitted=r.handleTransactionRejected=r.handleTransactionFailed=r.handleTransactionDropped=r.handleTransactionConfirmed=r.handleTransactionApproved=r.handleTransactionAdded=r.handlePostTransactionBalanceUpdate=r.createTransactionEventFragmentWithTxId=r.METRICS_STATUS_FAILED=void 0;var n,s=e("ethereumjs-util"),o=(n=e("@metamask/eth-query"))&&n.__esModule?n:{default:n},i=e("bignumber.js"),a=e("@metamask/transaction-controller"),l=e("../../../../shared/constants/app"),c=e("../../../../shared/modules/transaction.utils"),d=e("../../../../shared/modules/conversion.utils"),u=e("../../../../shared/constants/transaction"),h=e("../../../../shared/constants/metametrics"),p=e("../../../../shared/constants/gas"),g=e("../../../../shared/lib/transactions-controller-utils"),m=e("../../../../ui/helpers/utils/metrics"),C=e("../snap-keyring/metrics");const f=r.METRICS_STATUS_FAILED="failed on-chain";r.handleTransactionAdded=async(e,t)=>{if(!t.transactionMeta)return;const{properties:r,sensitiveProperties:n}=await b({transactionEventPayload:t,transactionMetricsRequest:e});y({eventName:u.TransactionMetaMetricsEvent.added,transactionEventPayload:t,transactionMetricsRequest:e,payload:{properties:r,sensitiveProperties:n}})};r.handleTransactionApproved=async(e,t)=>{t.transactionMeta&&await w({eventName:u.TransactionMetaMetricsEvent.approved,transactionEventPayload:t,transactionMetricsRequest:e})};r.handleTransactionFailed=async(e,t)=>{if(!t.transactionMeta)return;const r={};t.error&&(r.error=t.error),await w({eventName:u.TransactionMetaMetricsEvent.finalized,extraParams:r,transactionEventPayload:t,transactionMetricsRequest:e})};r.handleTransactionConfirmed=async(e,t)=>{if(!t.transactionMeta)return;const r={},{transactionMeta:n}=t,{txReceipt:s}=n;r.gas_used=null==s?void 0:s.gasUsed;const{submittedTime:o}=n;o&&(r.completion_time=function(e){return Math.round((Date.now()-e)/1e3).toString()}(o)),"0x0"===(null==s?void 0:s.status)&&(r.status=f),await w({eventName:u.TransactionMetaMetricsEvent.finalized,extraParams:r,transactionEventPayload:t,transactionMetricsRequest:e})};r.handleTransactionDropped=async(e,t)=>{if(!t.transactionMeta)return;await w({eventName:u.TransactionMetaMetricsEvent.finalized,extraParams:{dropped:!0},transactionEventPayload:t,transactionMetricsRequest:e})};r.handleTransactionRejected=async(e,t)=>{t.transactionMeta&&await w({eventName:u.TransactionMetaMetricsEvent.rejected,transactionEventPayload:t,transactionMetricsRequest:e})};r.handleTransactionSubmitted=async(e,t)=>{if(!t.transactionMeta)return;const{properties:r,sensitiveProperties:n}=await b({transactionEventPayload:t,transactionMetricsRequest:e});y({eventName:u.TransactionMetaMetricsEvent.submitted,transactionEventPayload:t,transactionMetricsRequest:e,payload:{properties:r,sensitiveProperties:n}})};r.createTransactionEventFragmentWithTxId=async(e,{transactionId:t,actionId:r})=>{const n=e.getTransaction(t);n.actionId=r;const{properties:s,sensitiveProperties:o}=await b({transactionEventPayload:{transactionMeta:n},transactionMetricsRequest:e});y({eventName:u.TransactionMetaMetricsEvent.approved,transactionEventPayload:{actionId:n.actionId,transactionMeta:n},transactionMetricsRequest:e,payload:{properties:s,sensitiveProperties:o}})};function y({eventName:e,transactionEventPayload:{transactionMeta:t,actionId:r},transactionMetricsRequest:n,payload:s}){if(function(e,t,r){const n=k(t,r.id);return void 0!==e(n)}(n.getEventFragmentById,e,t))return;const o=k(e,t.id);switch(e){case u.TransactionMetaMetricsEvent.added:n.createEventFragment({category:h.MetaMetricsEventCategory.Transactions,initialEvent:u.TransactionMetaMetricsEvent.added,successEvent:u.TransactionMetaMetricsEvent.approved,failureEvent:u.TransactionMetaMetricsEvent.rejected,properties:s.properties,sensitiveProperties:s.sensitiveProperties,actionId:r,uniqueIdentifier:o,persist:!0});break;case u.TransactionMetaMetricsEvent.approved:case u.TransactionMetaMetricsEvent.rejected:n.createEventFragment({category:h.MetaMetricsEventCategory.Transactions,successEvent:u.TransactionMetaMetricsEvent.approved,failureEvent:u.TransactionMetaMetricsEvent.rejected,properties:s.properties,sensitiveProperties:s.sensitiveProperties,actionId:r,uniqueIdentifier:o,persist:!0});break;case u.TransactionMetaMetricsEvent.submitted:n.createEventFragment({category:h.MetaMetricsEventCategory.Transactions,initialEvent:u.TransactionMetaMetricsEvent.submitted,successEvent:u.TransactionMetaMetricsEvent.finalized,properties:s.properties,sensitiveProperties:s.sensitiveProperties,actionId:r,uniqueIdentifier:o,persist:!0});break;case u.TransactionMetaMetricsEvent.finalized:n.createEventFragment({category:h.MetaMetricsEventCategory.Transactions,successEvent:u.TransactionMetaMetricsEvent.finalized,properties:s.properties,sensitiveProperties:s.sensitiveProperties,actionId:r,uniqueIdentifier:o,persist:!0})}}async function w({eventName:e,transactionEventPayload:t,transactionMetricsRequest:r,extraParams:n={}}){const{properties:s,sensitiveProperties:o}=await b({transactionEventPayload:t,transactionMetricsRequest:r,extraParams:n});y({eventName:e,transactionEventPayload:t,transactionMetricsRequest:r,payload:{properties:s,sensitiveProperties:o}}),function({eventName:e,transactionEventPayload:{transactionMeta:t},transactionMetricsRequest:r,payload:n}){const s=k(e,t.id);switch(e){case u.TransactionMetaMetricsEvent.approved:case u.TransactionMetaMetricsEvent.rejected:case u.TransactionMetaMetricsEvent.finalized:r.updateEventFragment(s,{properties:n.properties,sensitiveProperties:n.sensitiveProperties})}}({eventName:e,transactionEventPayload:t,transactionMetricsRequest:r,payload:{properties:s,sensitiveProperties:o}}),function({eventName:e,transactionMetricsRequest:t,transactionEventPayload:{transactionMeta:r}}){const n=k(e,r.id);switch(e){case u.TransactionMetaMetricsEvent.approved:t.finalizeEventFragment(n);break;case u.TransactionMetaMetricsEvent.rejected:t.finalizeEventFragment(n,{abandoned:!0});break;case u.TransactionMetaMetricsEvent.finalized:t.finalizeEventFragment(n)}}({eventName:e,transactionEventPayload:t,transactionMetricsRequest:r})}function k(e,t){return`transaction-${[u.TransactionMetaMetricsEvent.finalized,u.TransactionMetaMetricsEvent.submitted].includes(e)?"submitted":"added"}-${t}`}async function b({transactionEventPayload:{transactionMeta:e},transactionMetricsRequest:t,extraParams:r={}}){var n;const{type:f,time:y,status:w,chainId:k,origin:b,txParams:{gasPrice:v,gas:S,maxFeePerGas:A,maxPriorityFeePerGas:T,estimateSuggested:M,estimateUsed:P},defaultGasEstimates:E,originalType:N,replacedById:R,customTokenAmount:I,dappProposedTokenAmount:_,currentTokenBalance:O,originalApprovalAmount:F,finalApprovalAmount:L,contractMethodName:x,securityProviderResponse:U,simulationFails:D}=e,B=new o.default(t.provider),j=b===l.ORIGIN_METAMASK?"user":"dapp",{assetType:q,tokenStandard:K}=await(0,c.determineTransactionAssetType)(e,B,t.getTokenStandardAndDetails),G={};if((0,c.isEIP1559Transaction)(e)?(G.max_fee_per_gas=A,G.max_priority_fee_per_gas=T):G.gas_price=v,E){var $,H;const{estimateType:r}=E;if(r){var V,W;G.default_estimate=r;let n=null===(V=e.defaultGasEstimates)||void 0===V?void 0:V.maxFeePerGas,s=null===(W=e.defaultGasEstimates)||void 0===W?void 0:W.maxPriorityFeePerGas;if([p.GasRecommendations.low,p.GasRecommendations.medium,p.GasRecommendations.high].includes(r)){var z,Q;const{gasFeeEstimates:e}=await t.getEIP1559GasFeeEstimates();var Y,J;if(null!=e&&null!==(z=e[r])&&void 0!==z&&z.suggestedMaxFeePerGas)n=null===(Y=e[r])||void 0===Y?void 0:Y.suggestedMaxFeePerGas,G.default_max_fee_per_gas=n;if(null!=e&&null!==(Q=e[r])&&void 0!==Q&&Q.suggestedMaxPriorityFeePerGas)s=null===(J=e[r])||void 0===J?void 0:J.suggestedMaxPriorityFeePerGas,G.default_max_priority_fee_per_gas=s}}null!==($=e.defaultGasEstimates)&&void 0!==$&&$.gas&&(G.default_gas=e.defaultGasEstimates.gas),null!==(H=e.defaultGasEstimates)&&void 0!==H&&H.gasPrice&&(G.default_gas_price=e.defaultGasEstimates.gasPrice)}M&&(G.estimate_suggested=M),P&&(G.estimate_used=P),null!=r&&r.gas_used&&(G.gas_used=r.gas_used);const X=function(e){const t={};for(const r in e)(0,s.isHexString)(e[r])?t[r]=(0,d.hexWEIToDecGWEI)(e[r]):t[r]=e[r];return t}(G);let Z="0";e.txParams.maxFeePerGas&&(Z="2");const ee=f&&[a.TransactionType.contractInteraction,a.TransactionType.tokenMethodApprove,a.TransactionType.tokenMethodSafeTransferFrom,a.TransactionType.tokenMethodSetApprovalForAll,a.TransactionType.tokenMethodTransfer,a.TransactionType.tokenMethodTransferFrom,a.TransactionType.smart,a.TransactionType.swap,a.TransactionType.swapApproval].includes(f),te="Approve";let re,ne,se,oe,ie=a.TransactionType.simpleSend;f===a.TransactionType.cancel?ie=a.TransactionType.cancel:f===a.TransactionType.retry&&N?ie=N:f===a.TransactionType.deployContract?ie=a.TransactionType.deployContract:ee&&(ie=a.TransactionType.contractInteraction,ne=x,ne===te&&K===u.TokenStandard.ERC20&&("0"===_||"0"===I?re=u.TransactionApprovalAmountType.revoke:I&&I!==_?re=u.TransactionApprovalAmountType.custom:_&&(re=u.TransactionApprovalAmountType.dappProposed),se=function(e,t,r){if(e===u.TransactionApprovalAmountType.custom&&t&&r)return`${new i.BigNumber(t,10).div(r,10).times(100).round(2)}`;return null}(re,F,L),oe=function(e,t,r){if((e===u.TransactionApprovalAmountType.custom||e===u.TransactionApprovalAmountType.dappProposed)&&t&&r)return`${new i.BigNumber(t,16).div(r,10).times(100).round(2)}`;return null}(re,_,O)));const ae=t.getTransaction(R),le={RETRY:a.TransactionType.retry,CANCEL:a.TransactionType.cancel,SAME_NONCE:"other"};let ce;null!=r&&r.dropped&&(ce=le.SAME_NONCE,(null==ae?void 0:ae.type)===a.TransactionType.cancel?ce=le.CANCEL:(null==ae?void 0:ae.type)===a.TransactionType.retry&&(ce=le.RETRY));const de=[];1===(null==U?void 0:U.flagAsDangerous)?de.push(h.MetaMetricsEventUiCustomization.FlaggedAsMalicious):2===(null==U?void 0:U.flagAsDangerous)&&de.push(h.MetaMetricsEventUiCustomization.FlaggedAsSafetyUnknown);const ue=(0,m.getBlockaidMetricsProps)(e);(null==ue||null===(n=ue.ui_customizations)||void 0===n?void 0:n.length)>0&&de.push(...ue.ui_customizations),D&&de.push(h.MetaMetricsEventUiCustomization.GasEstimationFailed);let he={chain_id:k,referrer:b,source:j,status:w,network:`${parseInt(k,16)}`,eip_1559_version:Z,gas_edit_type:"none",gas_edit_attempted:"none",gas_estimation_failed:Boolean(D),account_type:await t.getAccountType(t.getSelectedAddress()),device_model:await t.getDeviceModel(t.getSelectedAddress()),asset_type:q,token_standard:K,transaction_type:ie,transaction_speed_up:f===a.TransactionType.retry,...ue,ui_customizations:de.length>0?de:null};const pe=await(0,C.getSnapAndHardwareInfoForMetrics)(t.getAccountType,t.getDeviceModel,t.snapAndHardwareMessenger);Object.assign(he,pe),ne===te&&(he={...he,transaction_approval_amount_type:re});let ge={transaction_envelope_type:(0,c.isEIP1559Transaction)(e)?g.TRANSACTION_ENVELOPE_TYPE_NAMES.FEE_MARKET:g.TRANSACTION_ENVELOPE_TYPE_NAMES.LEGACY,first_seen:y,gas_limit:S,transaction_contract_method:ne,transaction_replaced:ce,...r,...X};return ne===te&&(ge={...ge,transaction_approval_amount_vs_balance_ratio:oe,transaction_approval_amount_vs_proposed_ratio:se}),{properties:he,sensitiveProperties:ge}}r.handlePostTransactionBalanceUpdate=async({getParticipateInMetrics:e,trackEvent:t},{transactionMeta:r,approvalTransactionMeta:n})=>{var s;if(e()&&r.swapMetaData)if("0x0"===(null===(s=r.txReceipt)||void 0===s?void 0:s.status))t({event:"Swap Failed",sensitiveProperties:{...r.swapMetaData},category:h.MetaMetricsEventCategory.Swaps});else{var o;const e=(0,g.getSwapsTokensReceivedFromTxMeta)(r.destinationTokenSymbol,r,r.destinationTokenAddress,r.txParams.from,r.destinationTokenDecimals,n,r.chainId),s=e?`${new i.BigNumber(e,10).div(r.swapMetaData.token_to_amount,10).times(100).round(2)}%`:null,a=null!==(o=r.txReceipt)&&void 0!==o&&o.gasUsed&&r.swapMetaData.estimated_gas?`${new i.BigNumber(r.txReceipt.gasUsed,16).div(r.swapMetaData.estimated_gas,10).times(100).round(2)}%`:null,l=function(e,t){var r,n;let s="0x0";null!=t&&t.txReceipt&&(s=(0,g.calcGasTotal)(t.txReceipt.gasUsed,t.txReceipt.effectiveGasPrice));const o=(0,g.calcGasTotal)(null===(r=e.txReceipt)||void 0===r?void 0:r.gasUsed,null===(n=e.txReceipt)||void 0===n?void 0:n.effectiveGasPrice),a=new i.BigNumber(o,16).plus(s,16).toString(16);return{approvalGasCostInEth:Number((0,d.hexWEIToDecETH)(s)),tradeGasCostInEth:Number((0,d.hexWEIToDecETH)(o)),tradeAndApprovalGasCostInEth:Number((0,d.hexWEIToDecETH)(a))}}(r,n);t({event:h.MetaMetricsEventName.SwapCompleted,category:h.MetaMetricsEventCategory.Swaps,sensitiveProperties:{...r.swapMetaData,token_to_amount_received:e,quote_vs_executionRatio:s,estimated_vs_used_gasRatio:a,approval_gas_cost_in_eth:l.approvalGasCostInEth,trade_gas_cost_in_eth:l.tradeGasCostInEth,trade_and_approval_gas_cost_in_eth:l.tradeAndApprovalGasCostInEth,token_to_amount:r.swapMetaData.token_to_amount.toString(10)}})}}}}},{package:"$root$",file:"app/scripts/lib/transaction/metrics.ts"}],[9,{"../../../shared/constants/alarms":4045,"../../../shared/constants/app":4047,"../../../shared/constants/preferences":4061,"../../../shared/constants/time":4068,"../../../shared/modules/mv3.utils":4091,"../../../ui/helpers/utils/build-types":4773,"../metamask-controller":92,"@metamask/controller-utils":1063,"@metamask/obs-store":1395,events:2838,loglevel:3416,uuid:3994},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=m(e("events")),s=e("@metamask/obs-store"),o=e("uuid"),i=m(e("loglevel")),a=e("@metamask/controller-utils"),l=e("../metamask-controller"),c=e("../../../shared/constants/time"),d=e("../../../shared/constants/alarms"),u=e("../../../shared/modules/mv3.utils"),h=e("../../../ui/helpers/utils/build-types"),p=e("../../../shared/constants/app"),g=e("../../../shared/constants/preferences");function m(e){return e&&e.__esModule?e:{default:e}}class C extends n.default{constructor(e={}){const{addUnlockListener:t,isUnlocked:r,initState:n,onInactiveTimeout:o,preferencesStore:i,messenger:a,extension:l}=e;super(),this.extension=l,this.onInactiveTimeout=o||(()=>undefined),this.store=new s.ObservableStore({timeoutMinutes:g.DEFAULT_AUTO_LOCK_TIME_LIMIT,connectedStatusPopoverHasBeenShown:!0,defaultHomeActiveTabName:null,browserEnvironment:{},popupGasPollTokens:[],notificationGasPollTokens:[],fullScreenGasPollTokens:[],recoveryPhraseReminderHasBeenShown:!1,recoveryPhraseReminderLastShown:(new Date).getTime(),outdatedBrowserWarningLastShown:(new Date).getTime(),nftsDetectionNoticeDismissed:!1,showTestnetMessageInDropdown:!0,showBetaHeader:(0,h.isBeta)(),showProductTour:!0,showNetworkBanner:!0,showAccountBanner:!0,trezorModel:null,currentPopupId:undefined,hadAdvancedGasFeesSetPriorToMigration92_3:!1,...n,qrHardware:{},nftsDropdownState:{},usedNetworks:{"0x1":!0,"0x5":!0,"0x539":!0},surveyLinkLastClickedOrClosed:null,signatureSecurityAlertResponses:{}}),this.timer=null,this.isUnlocked=r,this.waitingForUnlock=[],t(this.handleUnlock.bind(this)),i.subscribe((({preferences:e})=>{this.store.getState().timeoutMinutes!==e.autoLockTimeLimit&&this._setInactiveTimeout(e.autoLockTimeLimit)})),a.subscribe("KeyringController:qrKeyringStateChange",(e=>this.store.updateState({qrHardware:e})));const{preferences:c}=i.getState();this._setInactiveTimeout(c.autoLockTimeLimit),this.messagingSystem=a,this._approvalRequestId=null}getUnlockPromise(e){return new Promise((t=>{this.isUnlocked()?t():this.waitForUnlock(t,e)}))}waitForUnlock(e,t){this.waitingForUnlock.push({resolve:e}),this.emit(l.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE),t&&this._requestApproval()}handleUnlock(){if(this.waitingForUnlock.length>0){for(;this.waitingForUnlock.length>0;)this.waitingForUnlock.shift().resolve();this.emit(l.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE)}this._acceptApproval()}setDefaultHomeActiveTabName(e){this.store.updateState({defaultHomeActiveTabName:e})}setConnectedStatusPopoverHasBeenShown(){this.store.updateState({connectedStatusPopoverHasBeenShown:!0})}setRecoveryPhraseReminderHasBeenShown(){this.store.updateState({recoveryPhraseReminderHasBeenShown:!0})}setSurveyLinkLastClickedOrClosed(e){this.store.updateState({surveyLinkLastClickedOrClosed:e})}setRecoveryPhraseReminderLastShown(e){this.store.updateState({recoveryPhraseReminderLastShown:e})}setTermsOfUseLastAgreed(e){this.store.updateState({termsOfUseLastAgreed:e})}setSnapsInstallPrivacyWarningShownStatus(e){this.store.updateState({snapsInstallPrivacyWarningShown:e})}setOutdatedBrowserWarningLastShown(e){this.store.updateState({outdatedBrowserWarningLastShown:e})}setLastActiveTime(){this._resetTimer()}_setInactiveTimeout(e){this.store.updateState({timeoutMinutes:e}),this._resetTimer()}_resetTimer(){const{timeoutMinutes:e}=this.store.getState();this.timer?clearTimeout(this.timer):u.isManifestV3&&this.extension.alarms.clear(d.AUTO_LOCK_TIMEOUT_ALARM),e&&(u.isManifestV3?(this.extension.alarms.create(d.AUTO_LOCK_TIMEOUT_ALARM,{delayInMinutes:e,periodInMinutes:e}),this.extension.alarms.onAlarm.addListener((e=>{e.name===d.AUTO_LOCK_TIMEOUT_ALARM&&(this.onInactiveTimeout(),this.extension.alarms.clear(d.AUTO_LOCK_TIMEOUT_ALARM))}))):this.timer=setTimeout((()=>this.onInactiveTimeout()),e*c.MINUTE))}setBrowserEnvironment(e,t){this.store.updateState({browserEnvironment:{os:e,browser:t}})}addPollingToken(e,t){if(t!==p.POLLING_TOKEN_ENVIRONMENT_TYPES[p.ENVIRONMENT_TYPE_BACKGROUND]){const r=this.store.getState()[t];this.store.updateState({[t]:[...r,e]})}}removePollingToken(e,t){if(t!==p.POLLING_TOKEN_ENVIRONMENT_TYPES[p.ENVIRONMENT_TYPE_BACKGROUND]){const r=this.store.getState()[t];this.store.updateState({[t]:r.filter((t=>t!==e))})}}clearPollingTokens(){this.store.updateState({popupGasPollTokens:[],notificationGasPollTokens:[],fullScreenGasPollTokens:[]})}setShowTestnetMessageInDropdown(e){this.store.updateState({showTestnetMessageInDropdown:e})}setShowBetaHeader(e){this.store.updateState({showBetaHeader:e})}setShowProductTour(e){this.store.updateState({showProductTour:e})}setShowNetworkBanner(e){this.store.updateState({showNetworkBanner:e})}setShowAccountBanner(e){this.store.updateState({showAccountBanner:e})}setTrezorModel(e){this.store.updateState({trezorModel:e})}updateNftDropDownState(e){this.store.updateState({nftsDropdownState:e})}setFirstTimeUsedNetwork(e){const t=this.store.getState(),{usedNetworks:r}=t;r[e]=!0,this.store.updateState({usedNetworks:r})}getSignatureSecurityAlertResponse(e){return this.store.getState().signatureSecurityAlertResponses[e]}addSignatureSecurityAlertResponse(e){const t=this.store.getState(),{signatureSecurityAlertResponses:r}=t;this.store.updateState({signatureSecurityAlertResponses:{...r,[e.securityAlertId]:e}})}setCurrentPopupId(e){this.store.updateState({currentPopupId:e})}getCurrentPopupId(){return this.store.getState().currentPopupId}_requestApproval(){this._approvalRequestId||(this._approvalRequestId=(0,o.v4)(),this.messagingSystem.call("ApprovalController:addRequest",{id:this._approvalRequestId,origin:p.ORIGIN_METAMASK,type:a.ApprovalType.Unlock},!0).catch((()=>{this._approvalRequestId=null})))}_acceptApproval(){if(this._approvalRequestId){try{this.messagingSystem.call("ApprovalController:acceptRequest",this._approvalRequestId)}catch(e){i.default.error("Failed to unlock approval request",e)}this._approvalRequestId=null}}}r.default=C}}},{package:"$root$",file:"app/scripts/controllers/app-state.js"}],[90,{"../../../../shared/constants/security-provider":4062,"../ppom/ppom-middleware":65,"@metamask/transaction-controller":1724,"@sentry/browser":1849,"ethereumjs-util":2798,uuid:3994},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.addDappTransaction=async function(e){const{dappRequest:t}=e,{id:r,method:n,origin:s}=t,{securityAlertResponse:o}=t,i={actionId:r,method:n,origin:s,requireApproval:!0,securityAlertResponse:o},{waitForHash:a}=await d({...e,transactionOptions:i});return await a()},r.addTransaction=async function(e,t){const{transactionParams:r,transactionOptions:n,ppomController:o,securityAlertsEnabled:u,chainId:h}=e,p=n.type&&c.includes(n.type);if(u&&a.SUPPORTED_CHAIN_IDS.includes(h)&&!p)try{const a={method:"eth_sendTransaction",id:"actionId"in n?n.actionId:"",origin:"origin"in n?n.origin:"",params:[{from:r.from,to:r.to,value:r.value,data:r.data}]},c=(0,i.v4)();o.usePPOM((async e=>{try{return await e.validateJsonRpc(a)}catch(e){(0,s.captureException)(e),console.error("Error validating JSON RPC using PPOM: ",e);return{securityAlertId:c,result_type:l.BlockaidResultType.Failed,reason:l.BlockaidReason.failed,description:"Validating the confirmation failed by throwing error."}}})).then((r=>{t(e.transactionOptions,{...r,securityAlertId:c})})),e.transactionOptions.securityAlertResponse={reason:l.BlockaidResultType.Loading,result_type:l.BlockaidReason.inProgress,securityAlertId:c}}catch(e){(0,s.captureException)(e)}const{transactionMeta:g,waitForHash:m}=await d(e);if(!e.waitForSubmit)return m().catch((()=>{})),g;const C=await m();return function(e,t){return t.state.transactions.find((t=>t.hash===e))}(C,e.transactionController)};var n=e("@metamask/transaction-controller"),s=e("@sentry/browser"),o=e("ethereumjs-util"),i=e("uuid"),a=e("../ppom/ppom-middleware"),l=e("../../../../shared/constants/security-provider");const c=[n.TransactionType.swap,n.TransactionType.swapApproval];async function d(e){const{selectedAccount:t}=e;return"eip155:erc4337"===t.type?async function(e){var t;const{networkClientId:r,transactionController:n,transactionOptions:s,transactionParams:i,userOperationController:a}=e,{maxFeePerGas:l,maxPriorityFeePerGas:c}=i,{origin:d,requireApproval:h,type:p}=s,g={...i,maxFeePerGas:(0,o.addHexPrefix)(l),maxPriorityFeePerGas:(0,o.addHexPrefix)(c)},m=null==s||null===(t=s.swaps)||void 0===t?void 0:t.meta;null!=m&&m.type&&delete m.type;const C={networkClientId:r,origin:d,requireApproval:h,swaps:m,type:p},f=await a.addUserOperationFromTransaction(g,C);a.startPollingByNetworkClientId(r);return{transactionMeta:u(f.id,n),waitForHash:f.transactionHash}}(e):async function(e){const{transactionController:t,transactionOptions:r,transactionParams:n}=e,{result:s,transactionMeta:o}=await t.addTransaction(n,r);return{transactionMeta:o,waitForHash:()=>s}}(e)}function u(e,t){return t.state.transactions.find((t=>t.id===e))}}}},{package:"$root$",file:"app/scripts/lib/transaction/util.ts"}],[92,{"../../shared/constants/app":4047,"../../shared/constants/hardware-wallets":4053,"../../shared/constants/keyring":4054,"../../shared/constants/logs":4056,"../../shared/constants/metametrics":4057,"../../shared/constants/network":4058,"../../shared/constants/permissions":4060,"../../shared/constants/swaps":4066,"../../shared/constants/time":4068,"../../shared/constants/tokens":4069,"../../shared/constants/transaction":4070,"../../shared/lib/metamask-controller-utils":4073,"../../shared/lib/token-util":4077,"../../shared/modules/conversion.utils":4084,"../../shared/modules/mv3.utils":4091,"../../shared/modules/network.utils":4092,"../../shared/modules/string-utils":4098,"../../shared/modules/transaction.utils":4100,"../../shared/notifications":4102,"./controllers/account-order":6,"./controllers/alert":7,"./controllers/app-metadata":8,"./controllers/app-state":9,"./controllers/decrypt-message":10,"./controllers/detect-tokens":11,"./controllers/encryption-public-key":12,"./controllers/ens":14,"./controllers/metametrics":15,"./controllers/network-order":16,"./controllers/onboarding":17,"./controllers/permissions":21,"./controllers/preferences":25,"./controllers/swaps":26,"./detect-multiple-instances":27,"./lib/AccountIdentitiesPetnamesBridge":30,"./lib/AddressBookPetnamesBridge":31,"./lib/ComposableObservableStore":32,"./lib/SnapsNameProvider":33,"./lib/account-tracker":34,"./lib/backup":35,"./lib/createDupeReqFilterMiddleware":36,"./lib/createLoggerMiddleware":37,"./lib/createMetaRPCHandler":38,"./lib/createMetamaskMiddleware":39,"./lib/createOnboardingMiddleware":40,"./lib/createOriginMiddleware":41,"./lib/createRPCMethodTrackingMiddleware":42,"./lib/createTabIdMiddleware":44,"./lib/encryptor-factory":45,"./lib/hardware-keyring-builder-factory":53,"./lib/keyring-snaps-permissions":54,"./lib/offscreen-bridge/lattice-offscreen-keyring":61,"./lib/offscreen-bridge/ledger-offscreen-bridge":62,"./lib/offscreen-bridge/trezor-offscreen-bridge":63,"./lib/ppom/indexed-db-backend":64,"./lib/ppom/ppom":66,"./lib/ppom/ppom-middleware":65,"./lib/rpc-method-middleware":77,"./lib/security-provider-helpers":78,"./lib/segment":80,"./lib/snap-keyring":84,"./lib/stream-utils":88,"./lib/transaction/metrics":89,"./lib/transaction/util":90,"./lib/util":91,"./translate":211,"@keystonehq/metamask-airgapped-keyring":540,"@metamask/accounts-controller":995,"@metamask/address-book-controller":998,"@metamask/announcement-controller":1028,"@metamask/approval-controller":1031,"@metamask/assets-controllers":1050,"@metamask/base-controller":1058,"@metamask/controller-utils":1063,"@metamask/eth-json-rpc-middleware":1079,"@metamask/eth-keyring-controller":1095,"@metamask/eth-ledger-bridge-keyring":1096,"@metamask/eth-query":1100,"@metamask/eth-trezor-keyring":1157,"@metamask/ethjs-query":1174,"@metamask/gas-fee-controller":1188,"@metamask/keyring-controller":1273,"@metamask/logging-controller":1301,"@metamask/name-controller":1332,"@metamask/network-controller":1344,"@metamask/notification-controller":1348,"@metamask/obs-store":1395,"@metamask/obs-store/dist/asStream":1394,"@metamask/permission-controller":1403,"@metamask/phishing-controller":1413,"@metamask/post-message-stream":1422,"@metamask/ppom-validator":1459,"@metamask/queued-request-controller":1469,"@metamask/rate-limit-controller":1471,"@metamask/scure-bip39/dist/wordlists/english":1483,"@metamask/selected-network-controller":1495,"@metamask/signature-controller":1497,"@metamask/smart-transactions-controller":1511,"@metamask/snaps-controllers":1529,"@metamask/snaps-rpc-methods":1597,"@metamask/transaction-controller":1724,"@metamask/user-operation-controller":1741,"@sentry/browser":1849,"await-semaphore":2318,buffer:2430,"eth-json-rpc-filters":2717,"eth-json-rpc-filters/subscriptionManager":2719,"eth-lattice-keyring":2721,"eth-rpc-errors":2754,events:2838,"json-rpc-engine":3200,"json-rpc-middleware-stream":3204,lodash:3406,loglevel:3416,nanoid:3502,pump:3593},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){(function(t){(function(){Object.defineProperty(r,"__esModule",{value:!0}),r.default=r.METAMASK_CONTROLLER_EVENTS=void 0;var n=ut(e("events")),s=ut(e("pump")),o=e("@metamask/assets-controllers"),i=e("@metamask/obs-store"),a=e("@metamask/obs-store/dist/asStream"),l=e("json-rpc-engine"),c=e("json-rpc-middleware-stream"),d=e("@metamask/eth-json-rpc-middleware"),u=e("lodash"),h=e("@metamask/eth-keyring-controller"),p=e("@metamask/keyring-controller"),g=ut(e("eth-json-rpc-filters")),m=ut(e("eth-json-rpc-filters/subscriptionManager")),C=e("eth-rpc-errors"),f=e("await-semaphore"),y=ut(e("loglevel")),w=e("@metamask/eth-trezor-keyring"),k=e("@metamask/eth-ledger-bridge-keyring"),b=ut(e("eth-lattice-keyring")),v=e("@keystonehq/metamask-airgapped-keyring"),S=ut(e("@metamask/eth-query")),A=ut(e("@metamask/ethjs-query")),T=ut(e("nanoid")),M=e("@sentry/browser"),P=e("@metamask/address-book-controller"),E=e("@metamask/approval-controller"),N=e("@metamask/base-controller"),R=e("@metamask/phishing-controller"),I=e("@metamask/announcement-controller"),_=e("@metamask/network-controller"),O=e("@metamask/gas-fee-controller"),F=e("@metamask/permission-controller"),L=ut(e("@metamask/smart-transactions-controller")),x=e("@metamask/selected-network-controller"),U=e("@metamask/logging-controller"),D=e("@metamask/rate-limit-controller"),B=e("@metamask/notification-controller"),j=e("@metamask/snaps-controllers"),q=e("@metamask/snaps-rpc-methods"),K=e("@metamask/accounts-controller"),G=e("@metamask/signature-controller"),$=e("@metamask/ppom-validator"),H=e("@metamask/controller-utils"),V=e("@metamask/scure-bip39/dist/wordlists/english"),W=e("@metamask/name-controller"),z=e("@metamask/queued-request-controller"),Q=e("@metamask/user-operation-controller"),Y=e("@metamask/transaction-controller"),J=e("@metamask/post-message-stream"),X=e("../../shared/constants/transaction"),Z=e("../../shared/constants/swaps"),ee=e("../../shared/constants/network"),te=e("../../shared/constants/hardware-wallets"),re=e("../../shared/constants/keyring"),ne=e("../../shared/constants/permissions"),se=e("../../shared/notifications"),oe=e("../../shared/constants/time"),ie=e("../../shared/constants/app"),ae=e("../../shared/constants/metametrics"),le=e("../../shared/constants/logs"),ce=e("../../shared/lib/token-util"),de=e("../../shared/modules/string-utils"),ue=e("../../shared/modules/transaction.utils"),he=e("../../shared/constants/tokens"),pe=e("../../shared/lib/metamask-controller-utils"),ge=e("../../shared/modules/mv3.utils"),me=e("../../shared/modules/conversion.utils"),Ce=e("../../shared/modules/network.utils"),fe=e("./lib/transaction/metrics"),ye=e("./lib/keyring-snaps-permissions"),we=e("./lib/SnapsNameProvider"),ke=e("./lib/AddressBookPetnamesBridge"),be=e("./lib/AccountIdentitiesPetnamesBridge"),ve=e("./lib/ppom/ppom-middleware"),Se=function(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var r=dt(t);if(r&&r.has(e))return r.get(e);var n={__proto__:null},s=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if("default"!==o&&Object.prototype.hasOwnProperty.call(e,o)){var i=s?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,r&&r.set(e,n),n}(e("./lib/ppom/ppom")),Ae=e("./detect-multiple-instances"),Te=ut(e("./lib/ComposableObservableStore")),Me=ut(e("./lib/account-tracker")),Pe=ut(e("./lib/createDupeReqFilterMiddleware")),Ee=ut(e("./lib/createLoggerMiddleware")),Ne=e("./lib/rpc-method-middleware"),Re=ut(e("./lib/createOriginMiddleware")),Ie=ut(e("./lib/createTabIdMiddleware")),_e=e("./controllers/network-order"),Oe=e("./controllers/account-order"),Fe=ut(e("./lib/createOnboardingMiddleware")),Le=e("./lib/stream-utils"),xe=ut(e("./controllers/ens")),Ue=ut(e("./controllers/preferences")),De=ut(e("./controllers/app-state")),Be=ut(e("./controllers/alert")),je=ut(e("./controllers/onboarding")),qe=ut(e("./lib/backup")),Ke=ut(e("./controllers/decrypt-message")),Ge=ut(e("./controllers/detect-tokens")),$e=ut(e("./controllers/swaps")),He=ut(e("./controllers/metametrics")),Ve=e("./lib/segment"),We=ut(e("./lib/createMetaRPCHandler")),ze=e("./lib/util"),Qe=ut(e("./lib/createMetamaskMiddleware")),Ye=e("./lib/hardware-keyring-builder-factory"),Je=ut(e("./controllers/encryption-public-key")),Xe=ut(e("./controllers/app-metadata")),Ze=e("./controllers/permissions"),et=ut(e("./lib/createRPCMethodTrackingMiddleware")),tt=e("./lib/security-provider-helpers"),rt=e("./lib/ppom/indexed-db-backend"),nt=e("./translate"),st=e("./lib/offscreen-bridge/trezor-offscreen-bridge"),ot=e("./lib/offscreen-bridge/ledger-offscreen-bridge"),it=e("./lib/snap-keyring"),at=e("./lib/encryptor-factory"),lt=e("./lib/transaction/util"),ct=e("./lib/offscreen-bridge/lattice-offscreen-keyring");function dt(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(dt=function(e){return e?r:t})(e)}function ut(e){return e&&e.__esModule?e:{default:e}}function ht(e,t,r){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(r!==undefined){var n=r.call(e,t||"default");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}r.METAMASK_CONTROLLER_EVENTS={UPDATE_BADGE:"updateBadge",APPROVAL_STATE_CHANGE:"ApprovalController:stateChange"};class pt extends n.default{constructor(e){var t,r;super(),ht(this,"_trackSnapExportUsage",(0,u.wrap)((0,u.memoize)((()=>(0,u.throttle)(((e,t,r,n)=>{var s;return this.metaMetricsController.trackEvent({event:ae.MetaMetricsEventName.SnapExportUsed,category:ae.MetaMetricsEventCategory.Snaps,properties:{snap_id:e,export:t,snap_category:null===(s=this._getSnapMetadata(e))||void 0===s?void 0:s.category,success:r,origin:n}})}),60*oe.SECOND)),((e,t,r,n)=>`${e}${t}${n}`)),((e,...t)=>e(...t)(...t)))),ht(this,"handleWatchAssetRequest",(({asset:e,type:t,origin:r,networkClientId:n})=>{switch(t){case H.ERC20:return this.tokensController.watchAsset({asset:e,type:t,networkClientId:n});case H.ERC721:case H.ERC1155:return this.nftController.watchNft(e,t,r);default:throw new Error(`Asset type ${t} not supported`)}})),ht(this,"removePermissionsFor",(e=>{try{this.permissionController.revokePermissions(e)}catch(e){if(!(e instanceof F.PermissionsRequestNotFoundError))throw e}})),ht(this,"updateCaveat",((e,t,r,n)=>{try{this.controllerMessenger.call("PermissionController:updateCaveat",e,t,r,n)}catch(e){if(!(e instanceof F.PermissionsRequestNotFoundError))throw e}})),ht(this,"updateNetworksList",(e=>{try{this.networkOrderController.updateNetworksList(e)}catch(e){throw y.default.error(e.message),e}})),ht(this,"updateAccountsList",(e=>{try{this.accountOrderController.updateAccountsList(e)}catch(e){throw y.default.error(e.message),e}})),ht(this,"updateHiddenAccountsList",(e=>{try{this.accountOrderController.updateHiddenAccountsList(e)}catch(e){throw y.default.error(e.message),e}})),ht(this,"rejectPermissionsRequest",(e=>{try{this.permissionController.rejectPermissionsRequest(e)}catch(e){if(!(e instanceof F.PermissionsRequestNotFoundError))throw e}})),ht(this,"acceptPermissionsRequest",(e=>{try{this.permissionController.acceptPermissionsRequest(e)}catch(e){if(!(e instanceof F.PermissionsRequestNotFoundError))throw e}})),ht(this,"resolvePendingApproval",(async(e,t,r)=>{try{await this.approvalController.accept(e,t,r)}catch(e){if(!(e instanceof E.ApprovalRequestNotFoundError))throw e}})),ht(this,"rejectPendingApproval",((e,t)=>{try{this.approvalController.reject(e,new C.EthereumRpcError(t.code,t.message,t.data))}catch(e){if(!(e instanceof E.ApprovalRequestNotFoundError))throw e}}));const{isFirstMetaMaskControllerSetup:n}=e;this.defaultMaxListeners=20,this.sendUpdate=(0,u.debounce)(this.privateSendUpdate.bind(this),200*oe.MILLISECOND),this.opts=e,this.extension=e.browser,this.platform=e.platform,this.notificationManager=e.notificationManager;const s=e.initState||{},i=this.platform.getVersion();this.recordFirstTimeInfo(s),this.featureFlags=e.featureFlags,this.activeControllerConnections=0,this.getRequestAccountTabIds=e.getRequestAccountTabIds,this.getOpenMetamaskTabsIds=e.getOpenMetamaskTabsIds,this.controllerMessenger=new N.ControllerMessenger,this.loggingController=new U.LoggingController({messenger:this.controllerMessenger.getRestricted({name:"LoggingController"}),state:s.LoggingController}),this.localStoreApiWrapper=e.localStore,this.currentMigrationVersion=e.currentMigrationVersion,this.store=new Te.default({state:s,controllerMessenger:this.controllerMessenger,persist:!0}),this.connections={},this.createVaultMutex=new f.Mutex,this.extension.runtime.onInstalled.addListener((e=>{"update"===e.reason&&("8.1.0"===i&&this.platform.openExtensionInBrowser(),this.loggingController.add({type:U.LogType.GenericLog,data:{event:le.LOG_EVENT.VERSION_UPDATE,previousVersion:e.previousVersion,version:i}}))})),this.appMetadataController=new Xe.default({state:s.AppMetadataController,currentMigrationVersion:this.currentMigrationVersion,currentAppVersion:i}),this.queuedRequestController=new z.QueuedRequestController({messenger:this.controllerMessenger.getRestricted({name:"QueuedRequestController"})}),this.approvalController=new E.ApprovalController({messenger:this.controllerMessenger.getRestricted({name:"ApprovalController"}),showApprovalRequest:e.showUserConfirmation,typesExcludedFromRateLimiting:[H.ApprovalType.EthSign,H.ApprovalType.PersonalSign,H.ApprovalType.EthSignTypedData,H.ApprovalType.Transaction,H.ApprovalType.WatchAsset,H.ApprovalType.EthGetEncryptionPublicKey,H.ApprovalType.EthDecrypt]});const a=this.controllerMessenger.getRestricted({name:"NetworkController"});let l={};s.NetworkController&&(l=s.NetworkController),this.networkController=new _.NetworkController({messenger:a,state:l,infuraProjectId:e.infuraProjectId,trackMetaMetricsEvent:(...e)=>this.metaMetricsController.trackEvent(...e)}),this.networkController.initializeProvider(),this.provider=this.networkController.getProviderAndBlockTracker().provider,this.blockTracker=this.networkController.getProviderAndBlockTracker().blockTracker,this.deprecatedNetworkId=null,this.updateDeprecatedNetworkId(),a.subscribe("NetworkController:networkDidChange",(()=>this.updateDeprecatedNetworkId()));const c=this.controllerMessenger.getRestricted({name:"TokenListController",allowedEvents:["NetworkController:stateChange"]});this.selectedNetworkController=new x.SelectedNetworkController({messenger:this.controllerMessenger.getRestricted({name:"SelectedNetworkController",allowedActions:["NetworkController:getNetworkClientById"],allowedEvents:["NetworkController:stateChange"]})}),this.tokenListController=new o.TokenListController({chainId:this.networkController.state.providerConfig.chainId,preventPollingOnNetworkRestart:!s.TokenListController||s.TokenListController.preventPollingOnNetworkRestart,messenger:c,state:s.TokenListController}),this.preferencesController=new Ue.default({initState:s.PreferencesController,initLangCode:e.initLangCode,tokenListController:this.tokenListController,provider:this.provider,networkConfigurations:this.networkController.state.networkConfigurations}),this.assetsContractController=new o.AssetsContractController({chainId:this.networkController.state.providerConfig.chainId,onPreferencesStateChange:e=>this.preferencesController.store.subscribe(e),onNetworkDidChange:e=>a.subscribe("NetworkController:networkDidChange",(()=>{const t=this.networkController.state;return e(t)})),getNetworkClientById:this.networkController.getNetworkClientById.bind(this.networkController)},{provider:this.provider},s.AssetsContractController);const d=this.controllerMessenger.getRestricted({name:"TokensController",allowedActions:["ApprovalController:addRequest"],allowedEvents:["NetworkController:stateChange","AccountsController:selectedAccountChange"]});this.tokensController=new o.TokensController({messenger:d,chainId:this.networkController.state.providerConfig.chainId,onPreferencesStateChange:e=>this.controllerMessenger.subscribe("AccountsController:selectedAccountChange",(t=>{e({selectedAddress:t.address})})),onNetworkDidChange:e=>a.subscribe("NetworkController:networkDidChange",(()=>{const t=this.networkController.state;return e(t)})),onTokenListStateChange:e=>this.controllerMessenger.subscribe(`${this.tokenListController.name}:stateChange`,e),getNetworkClientById:this.networkController.getNetworkClientById.bind(this.networkController),config:{provider:this.provider,selectedAddress:(null===(t=s.AccountsController)||void 0===t||null===(t=t.internalAccounts)||void 0===t||null===(t=t.accounts[null===(r=s.AccountsController)||void 0===r||null===(r=r.internalAccounts)||void 0===r?void 0:r.selectedAccount])||void 0===t?void 0:t.address)??""},state:s.TokensController});const g=this.controllerMessenger.getRestricted({name:"NftController",allowedActions:[`${this.approvalController.name}:addRequest`]});this.nftController=new o.NftController({messenger:g,chainId:this.networkController.state.providerConfig.chainId,onPreferencesStateChange:this.preferencesController.store.subscribe.bind(this.preferencesController.store),onNetworkStateChange:a.subscribe.bind(a,"NetworkController:stateChange"),getERC721AssetName:this.assetsContractController.getERC721AssetName.bind(this.assetsContractController),getERC721AssetSymbol:this.assetsContractController.getERC721AssetSymbol.bind(this.assetsContractController),getERC721TokenURI:this.assetsContractController.getERC721TokenURI.bind(this.assetsContractController),getERC721OwnerOf:this.assetsContractController.getERC721OwnerOf.bind(this.assetsContractController),getERC1155BalanceOf:this.assetsContractController.getERC1155BalanceOf.bind(this.assetsContractController),getERC1155TokenURI:this.assetsContractController.getERC1155TokenURI.bind(this.assetsContractController),onNftAdded:({address:e,symbol:t,tokenId:r,standard:n,source:s})=>this.metaMetricsController.trackEvent({event:ae.MetaMetricsEventName.NftAdded,category:ae.MetaMetricsEventCategory.Wallet,sensitiveProperties:{token_contract_address:e,token_symbol:t,token_id:r,token_standard:n,asset_type:X.AssetType.NFT,source:s}}),getNetworkClientById:this.networkController.getNetworkClientById.bind(this.networkController)},{},s.NftController),this.nftController.setApiKey(null),this.nftDetectionController=new o.NftDetectionController({chainId:this.networkController.state.providerConfig.chainId,onNftsStateChange:e=>this.nftController.subscribe(e),onPreferencesStateChange:this.preferencesController.store.subscribe.bind(this.preferencesController.store),onNetworkStateChange:a.subscribe.bind(a,"NetworkController:stateChange"),getOpenSeaApiKey:()=>this.nftController.openSeaApiKey,getBalancesInSingleCall:this.assetsContractController.getBalancesInSingleCall.bind(this.assetsContractController),addNft:this.nftController.addNft.bind(this.nftController),getNftApi:this.nftController.getNftApi.bind(this.nftController),getNftState:()=>this.nftController.state}),this.metaMetricsController=new He.default({segment:Ve.segment,preferencesStore:this.preferencesController.store,onNetworkDidChange:a.subscribe.bind(a,"NetworkController:networkDidChange"),getNetworkIdentifier:()=>{const{type:e,rpcUrl:t}=this.networkController.state.providerConfig;return e===ee.NETWORK_TYPES.RPC?t:e},getCurrentChainId:()=>this.networkController.state.providerConfig.chainId,version:this.platform.getVersion(),environment:"production",extension:this.extension,initState:s.MetaMetricsController,captureException:M.captureException}),this.on("update",(e=>{this.metaMetricsController.handleMetaMaskStateUpdate(e)}));const m=this.controllerMessenger.getRestricted({name:"GasFeeController",allowedActions:["NetworkController:getEIP1559Compatibility","NetworkController:getNetworkClientById","NetworkController:getState"],allowedEvents:["NetworkController:stateChange"]}),S=Z.GAS_API_BASE_URL;this.gasFeeController=new O.GasFeeController({state:s.GasFeeController,interval:1e4,messenger:m,clientId:Z.SWAPS_CLIENT_ID,getProvider:()=>this.networkController.getProviderAndBlockTracker().provider,onNetworkDidChange:e=>{a.subscribe("NetworkController:networkDidChange",(()=>e(this.networkController.state)))},getCurrentNetworkEIP1559Compatibility:this.networkController.getEIP1559Compatibility.bind(this.networkController),getCurrentAccountEIP1559Compatibility:this.getCurrentAccountEIP1559Compatibility.bind(this),legacyAPIEndpoint:`${S}/networks/<chain_id>/gasPrices`,EIP1559APIEndpoint:`${S}/networks/<chain_id>/suggestedGasFees`,getCurrentNetworkLegacyGasAPICompatibility:()=>{const{chainId:e}=this.networkController.state.providerConfig;return e===ee.CHAIN_IDS.BSC},getChainId:()=>this.networkController.state.providerConfig.chainId}),this.appStateController=new De.default({addUnlockListener:this.on.bind(this,"unlock"),isUnlocked:this.isUnlocked.bind(this),initState:s.AppStateController,onInactiveTimeout:()=>this.setLocked(),preferencesStore:this.preferencesController.store,messenger:this.controllerMessenger.getRestricted({name:"AppStateController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:acceptRequest`],allowedEvents:["KeyringController:qrKeyringStateChange"]}),extension:this.extension});const A=this.controllerMessenger.getRestricted({name:"CurrencyRateController",allowedActions:[`${this.networkController.name}:getNetworkClientById`]});this.currencyRateController=new o.CurrencyRateController({includeUsdRate:!0,messenger:A,state:s.CurrencyController});const T=this.controllerMessenger.getRestricted({name:"PhishingController"});this.phishingController=new R.PhishingController({messenger:T,state:s.PhishingController,hotlistRefreshInterval:undefined,stalelistRefreshInterval:undefined}),this.phishingController.maybeUpdateState(),this.ppomController=new $.PPOMController({messenger:this.controllerMessenger.getRestricted({name:"PPOMController",allowedEvents:["NetworkController:stateChange"]}),storageBackend:new rt.IndexedDBPPOMStorage("PPOMDB",1),provider:this.provider,ppomProvider:{PPOM:Se.PPOM,ppomInit:Se.default},state:s.PPOMController,chainId:this.networkController.state.providerConfig.chainId,securityAlertsEnabled:this.preferencesController.store.getState().securityAlertsEnabled,onPreferencesChange:this.preferencesController.store.subscribe.bind(this.preferencesController.store),cdnBaseUrl:"static.metafi.codefi.network/api/v1/confirmations/ppom",blockaidPublicKey:"066ad3e8af5583385e312c156d238055215d5f25247c1e91055afa756cb98a88"});const q=this.controllerMessenger.getRestricted({name:"AnnouncementController"});this.announcementController=new I.AnnouncementController({messenger:q,allAnnouncements:se.UI_NOTIFICATIONS,state:s.AnnouncementController});const V=this.controllerMessenger.getRestricted({name:"NetworkOrderController",allowedEvents:["NetworkController:stateChange"]});this.networkOrderController=new _e.NetworkOrderController({messenger:V,state:s.NetworkOrderController});const te=this.controllerMessenger.getRestricted({name:"AccountOrderController"});this.accountOrderController=new Oe.AccountOrderController({messenger:te,state:s.AccountOrderController});const re=this.controllerMessenger.getRestricted({name:"AccountsController",allowedEvents:["SnapController:stateChange","KeyringController:accountRemoved","KeyringController:stateChange","AccountsController:selectedAccountChange"],allowedActions:["AccountsController:setCurrentAccount","AccountsController:setAccountName","AccountsController:listAccounts","AccountsController:getSelectedAccount","AccountsController:getAccountByAddress","AccountsController:updateAccounts","KeyringController:getAccounts","KeyringController:getKeyringsByType","KeyringController:getKeyringForAccount"]});this.accountsController=new K.AccountsController({messenger:re,state:s.AccountsController}),this.tokenRatesController=new o.TokenRatesController({chainId:this.networkController.state.providerConfig.chainId,ticker:this.networkController.state.providerConfig.ticker,selectedAddress:this.accountsController.getSelectedAccount().address,onTokensStateChange:e=>this.tokensController.subscribe(e),onNetworkStateChange:a.subscribe.bind(a,"NetworkController:stateChange"),onPreferencesStateChange:e=>this.controllerMessenger.subscribe("AccountsController:selectedAccountChange",(t=>{e({selectedAddress:t.address})})),tokenPricesService:new o.CodefiTokenPricesServiceV2,getNetworkClientById:this.networkController.getNetworkClientById.bind(this.networkController)},{allTokens:this.tokensController.state.allTokens,allDetectedTokens:this.tokensController.state.allDetectedTokens},s.TokenRatesController),this.preferencesController.store.getState().useCurrencyRateCheck&&this.tokenRatesController.start(),this.preferencesController.store.subscribe((0,ze.previousValueComparator)(((e,t)=>{const{useCurrencyRateCheck:r}=e,{useCurrencyRateCheck:n}=t;n&&!r?(this.currencyRateController.startPollingByNetworkClientId(this.networkController.state.selectedNetworkClientId),this.tokenRatesController.start()):!n&&r&&(this.currencyRateController.stopAllPolling(),this.tokenRatesController.stop())}),this.preferencesController.store.getState())),this.ensController=new xe.default({provider:this.provider,getCurrentChainId:()=>this.networkController.state.providerConfig.chainId,onNetworkDidChange:a.subscribe.bind(a,"NetworkController:networkDidChange")}),this.onboardingController=new je.default({initState:s.OnboardingController});let ce=[(0,h.keyringBuilderFactory)(v.MetaMaskKeyring)];if(!1===ge.isManifestV3){var de;const e=null===(de=this.opts.overrides)||void 0===de?void 0:de.keyrings,t=[(null==e?void 0:e.lattice)||b.default,v.MetaMaskKeyring],r=[{keyring:(null==e?void 0:e.trezor)||w.TrezorKeyring,bridge:(null==e?void 0:e.trezorBridge)||w.TrezorConnectBridge},{keyring:(null==e?void 0:e.ledger)||k.LedgerKeyring,bridge:(null==e?void 0:e.ledgerBridge)||k.LedgerIframeBridge}];ce=t.map((e=>(0,h.keyringBuilderFactory)(e))),r.forEach((e=>ce.push((0,Ye.hardwareKeyringBuilderFactory)(e.keyring,e.bridge))))}else ce.push((0,Ye.hardwareKeyringBuilderFactory)(w.TrezorKeyring,st.TrezorOffscreenBridge),(0,Ye.hardwareKeyringBuilderFactory)(k.LedgerKeyring,ot.LedgerOffscreenBridge),(0,h.keyringBuilderFactory)(ct.LatticeKeyringOffscreen));const ue=this.controllerMessenger.getRestricted({name:"SnapKeyringBuilder",allowedActions:["ApprovalController:addRequest","ApprovalController:acceptRequest","ApprovalController:rejectRequest","ApprovalController:startFlow","ApprovalController:endFlow","ApprovalController:showSuccess","ApprovalController:showError","PhishingController:test","PhishingController:maybeUpdateState","KeyringController:getAccounts","SubjectMetadataController:getSubjectMetadata","AccountsController:setSelectedAccount","AccountsController:getAccountByAddress"]});ce.push((0,it.snapKeyringBuilder)(ue,(()=>this.snapController),(async()=>await this.keyringController.persistAllKeyrings()),(e=>this.preferencesController.setSelectedAddress(e)),(e=>this.removeAccount(e))));const he=this.controllerMessenger.getRestricted({name:"KeyringController"});this.keyringController=new p.KeyringController({cacheEncryptionKey:!0,keyringBuilders:ce,state:s.KeyringController,encryptor:e.encryptor||(0,at.encryptorFactory)(6e5),messenger:he,removeIdentity:this.preferencesController.removeAddress.bind(this.preferencesController),setAccountLabel:(e,t)=>{const r=this.accountsController.getAccountByAddress(e);if(r===undefined)throw new Error(`No account found for address: ${e}`);this.accountsController.setAccountName(r.id,t),this.preferencesController.setAccountLabel(e,t)},setSelectedAddress:e=>{const t=this.accountsController.getAccountByAddress(e);if(t===undefined)throw new Error(`No account found for address: ${e}`);this.accountsController.setSelectedAccount(t.id),this.preferencesController.setSelectedAddress(e)},syncIdentities:e=>{this.preferencesController.syncAddresses(e)},updateIdentities:this.preferencesController.setAddresses.bind(this.preferencesController)}),this.controllerMessenger.subscribe("KeyringController:unlock",(()=>this._onUnlock())),this.controllerMessenger.subscribe("KeyringController:lock",(()=>this._onLock())),this.controllerMessenger.subscribe("KeyringController:stateChange",(e=>{this._onKeyringControllerUpdate(e)})),this.permissionController=new F.PermissionController({messenger:this.controllerMessenger.getRestricted({name:"PermissionController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:hasRequest`,`${this.approvalController.name}:acceptRequest`,`${this.approvalController.name}:rejectRequest`,"SnapController:getPermitted","SnapController:install","SubjectMetadataController:getSubjectMetadata"]}),state:s.PermissionController,caveatSpecifications:(0,Ze.getCaveatSpecifications)({getInternalAccounts:this.accountsController.listAccounts.bind(this.accountsController)}),permissionSpecifications:{...(0,Ze.getPermissionSpecifications)({getInternalAccounts:this.accountsController.listAccounts.bind(this.accountsController),getAllAccounts:this.keyringController.getAccounts.bind(this.keyringController),captureKeyringTypesWithMissingIdentities:(e=[],t=[])=>{const r=t.filter((t=>!e.some((e=>e.address.toLowerCase()===t.toLowerCase())))).map((e=>this.keyringController.getAccountKeyringType(e))),n=e.length,s=Object.keys(this.accountTracker.store.getState().accounts||{}).length;(0,M.captureException)(new Error(`Attempt to get permission specifications failed because their were ${t.length} accounts, but ${n} identities, and the ${r} keyrings included accounts with missing identities. Meanwhile, there are ${s} accounts in the account tracker.`))}}),...this.getSnapPermissionSpecifications()},unrestrictedMethods:Ze.unrestrictedMethods}),this.permissionLogController=new Ze.PermissionLogController({restrictedMethods:new Set(Object.keys(ne.RestrictedMethods)),initState:s.PermissionLogController}),this.subjectMetadataController=new F.SubjectMetadataController({messenger:this.controllerMessenger.getRestricted({name:"SubjectMetadataController",allowedActions:[`${this.permissionController.name}:hasPermissions`]}),state:s.SubjectMetadataController,subjectCacheLimit:100}),this.runtimeStream=new J.BrowserRuntimePostMessageStream({name:"parent",target:"child"}),this.runtimeStream.on("data",(e=>{console.log("Service worker received data from offscreen document",e)}));const pe={iframeUrl:new URL("https://execution.metamask.io/3.5.0/index.html"),messenger:this.controllerMessenger.getRestricted({name:"ExecutionService"}),setupSnapProvider:this.setupSnapProvider.bind(this)};this.snapExecutionService=new j.IframeExecutionService(pe);const me=this.controllerMessenger.getRestricted({name:"SnapController",allowedEvents:["ExecutionService:unhandledError","ExecutionService:outboundRequest","ExecutionService:outboundResponse"],allowedActions:[`${this.permissionController.name}:getEndowments`,`${this.permissionController.name}:getPermissions`,`${this.permissionController.name}:hasPermission`,`${this.permissionController.name}:hasPermissions`,`${this.permissionController.name}:requestPermissions`,`${this.permissionController.name}:revokeAllPermissions`,`${this.permissionController.name}:revokePermissions`,`${this.permissionController.name}:revokePermissionForAllSubjects`,`${this.permissionController.name}:getSubjectNames`,`${this.permissionController.name}:updateCaveat`,`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:updateRequestState`,`${this.permissionController.name}:grantPermissions`,`${this.subjectMetadataController.name}:getSubjectMetadata`,`${this.subjectMetadataController.name}:addSubjectMetadata`,`${this.phishingController.name}:maybeUpdateState`,`${this.phishingController.name}:testOrigin`,"ExecutionService:executeSnap","ExecutionService:getRpcRequestHandler","ExecutionService:terminateSnap","ExecutionService:terminateAllSnaps","ExecutionService:handleRpcRequest","SnapsRegistry:get","SnapsRegistry:getMetadata","SnapsRegistry:update","SnapsRegistry:resolveVersion"]}),Ce=!0;this.snapController=new j.SnapController({environmentEndowmentPermissions:Object.values(ne.EndowmentPermissions),excludedPermissions:{...ne.ExcludedSnapPermissions,...ne.ExcludedSnapEndowments},closeAllConnections:this.removeAllConnections.bind(this),state:s.SnapController,messenger:me,featureFlags:{dappsCanUpdateSnaps:!0,allowLocalSnaps:!1,requireAllowlist:Ce}}),this.notificationController=new B.NotificationController({messenger:this.controllerMessenger.getRestricted({name:"NotificationController"}),state:s.NotificationController}),this.rateLimitController=new D.RateLimitController({state:s.RateLimitController,messenger:this.controllerMessenger.getRestricted({name:"RateLimitController"}),implementations:{showNativeNotification:{method:(e,t)=>{const r=this.controllerMessenger.call("SubjectMetadataController:getState").subjectMetadata[e];return this.platform._showNotification((null==r?void 0:r.name)??e,t).catch((e=>{y.default.error("Failed to create notification",e)})),null},rateLimitCount:2,rateLimitTimeout:3e5},showInAppNotification:{method:(e,t)=>(this.controllerMessenger.call("NotificationController:show",e,t),null),rateLimitCount:5,rateLimitTimeout:6e4}}});const fe=this.controllerMessenger.getRestricted({name:"CronjobController",allowedEvents:["SnapController:snapInstalled","SnapController:snapUpdated","SnapController:snapUninstalled","SnapController:snapEnabled","SnapController:snapDisabled"],allowedActions:[`${this.permissionController.name}:getPermissions`,"SnapController:handleRequest","SnapController:getAll"]});this.cronjobController=new j.CronjobController({state:s.CronjobController,messenger:fe});const ye=this.controllerMessenger.getRestricted({name:"SnapsRegistry",allowedEvents:[],allowedActions:[]});this.snapsRegistry=new j.JsonSnapsRegistry({state:s.SnapsRegistry,messenger:ye,refetchOnAllowlistMiss:Ce,failOnUnavailableRegistry:Ce,url:{registry:"https://acl.execution.metamask.io/latest/registry.json",signature:"https://acl.execution.metamask.io/latest/signature.json"},publicKey:"0x025b65308f0f0fb8bc7f7ff87bfc296e0330eee5d3c1d1ee4a048b2fd6a86fa0a6"}),this.accountTracker=new Me.default({provider:this.provider,blockTracker:this.blockTracker,getCurrentChainId:()=>this.networkController.state.providerConfig.chainId,getNetworkIdentifier:e=>{const{type:t,rpcUrl:r}=e??this.networkController.state.providerConfig;return t===ee.NETWORK_TYPES.RPC?r:t},preferencesController:this.preferencesController,onboardingController:this.onboardingController,controllerMessenger:this.controllerMessenger.getRestricted({name:"AccountTracker",allowedEvents:["AccountsController:selectedAccountChange"],allowedActions:["AccountsController:getSelectedAccount"]}),initState:{accounts:{}},onAccountRemoved:this.controllerMessenger.subscribe.bind(this.controllerMessenger,"KeyringController:accountRemoved")}),this.on("controllerConnectionChanged",(e=>{const{completedOnboarding:t}=this.onboardingController.store.getState();e>0&&t?this.triggerNetworkrequests():this.stopNetworkRequests()})),this.onboardingController.store.subscribe((0,ze.previousValueComparator)((async(e,t)=>{const{completedOnboarding:r}=e,{completedOnboarding:n}=t;!r&&n&&this.triggerNetworkrequests()}),this.onboardingController.store.getState()));const ve=this.controllerMessenger.getRestricted({name:"DetectTokensController",allowedActions:["KeyringController:getState"],allowedEvents:["NetworkController:stateChange","KeyringController:lock","KeyringController:unlock","AccountsController:selectedAccountChange","TokenListController:stateChange"]});this.detectTokensController=new Ge.default({messenger:ve,preferences:this.preferencesController,tokensController:this.tokensController,getCurrentSelectedAccount:this.accountsController.getSelectedAccount.bind(this.accountsController),assetsContractController:this.assetsContractController,network:this.networkController,tokenList:this.tokenListController,trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),getNetworkClientById:this.networkController.getNetworkClientById.bind(this.networkController)}),this.addressBookController=new P.AddressBookController(undefined,s.AddressBookController),this.alertController=new Be.default({initState:s.AlertController,preferencesStore:this.preferencesController.store,controllerMessenger:this.controllerMessenger.getRestricted({name:"AlertController",allowedEvents:["AccountsController:selectedAccountChange"],allowedActions:["AccountsController:getSelectedAccount"]})}),this.backup=new qe.default({preferencesController:this.preferencesController,addressBookController:this.addressBookController,accountsController:this.accountsController,networkController:this.networkController,trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.snapAndHardwareMetricsParams={getSelectedAccount:this.accountsController.getSelectedAccount.bind(this.accountsController),getAccountType:this.getAccountType.bind(this),getDeviceModel:this.getDeviceModel.bind(this),snapAndHardwareMessenger:this.controllerMessenger.getRestricted({name:"SnapAndHardwareMessenger",allowedActions:["KeyringController:getKeyringForAccount","SnapController:get","AccountsController:getSelectedAccount"]})},this.txController=new Y.TransactionController({blockTracker:this.blockTracker,cancelMultiplier:1.1,getCurrentNetworkEIP1559Compatibility:this.networkController.getEIP1559Compatibility.bind(this.networkController),getCurrentAccountEIP1559Compatibility:this.getCurrentAccountEIP1559Compatibility.bind(this),getExternalPendingTransactions:this.getExternalPendingTransactions.bind(this),getGasFeeEstimates:this.gasFeeController.fetchGasFeeEstimates.bind(this.gasFeeController),getNetworkState:()=>this.networkController.state,getPermittedAccounts:this.getPermittedAccounts.bind(this),getSavedGasFees:()=>this.preferencesController.store.getState().advancedGasFee[this.networkController.state.providerConfig.chainId],getSelectedAddress:()=>this.accountsController.getSelectedAccount().address,incomingTransactions:{includeTokenTransfers:!1,isEnabled:()=>{var e;return Boolean((null===(e=this.preferencesController.store.getState().incomingTransactionsPreferences)||void 0===e?void 0:e[this.networkController.state.providerConfig.chainId])&&this.onboardingController.store.getState().completedOnboarding)},queryEntireHistory:!1,updateTransactions:!1},messenger:this.controllerMessenger.getRestricted({name:"TransactionController",allowedActions:[`${this.approvalController.name}:addRequest`]}),onNetworkStateChange:e=>{a.subscribe("NetworkController:networkDidChange",(()=>e()))},provider:this.provider,hooks:{}},{sign:(...e)=>this.keyringController.signTransaction(...e)},s.TransactionController),this._addTransactionControllerListeners(),a.subscribe("NetworkController:networkDidChange",(async()=>{try{this.preferencesController.store.getState().useCurrencyRateCheck&&(await this.currencyRateController.stopAllPolling(),this.currencyRateController.startPollingByNetworkClientId(this.networkController.state.selectedNetworkClientId))}catch(e){console.error(e)}})),this.networkController.lookupNetwork(),this.decryptMessageController=new Ke.default({getState:this.getState.bind(this),messenger:this.controllerMessenger.getRestricted({name:"DecryptMessageController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:acceptRequest`,`${this.approvalController.name}:rejectRequest`,`${this.keyringController.name}:decryptMessage`]}),metricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.encryptionPublicKeyController=new Je.default({messenger:this.controllerMessenger.getRestricted({name:"EncryptionPublicKeyController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:acceptRequest`,`${this.approvalController.name}:rejectRequest`]}),getEncryptionPublicKey:this.keyringController.getEncryptionPublicKey.bind(this.keyringController),getAccountKeyringType:this.keyringController.getAccountKeyringType.bind(this.keyringController),getState:this.getState.bind(this),metricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.signatureController=new G.SignatureController({messenger:this.controllerMessenger.getRestricted({name:"SignatureController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.keyringController.name}:signMessage`,`${this.keyringController.name}:signPersonalMessage`,`${this.keyringController.name}:signTypedMessage`,`${this.loggingController.name}:add`]}),isEthSignEnabled:()=>{var e;return null===(e=this.preferencesController.store.getState())||void 0===e||null===(e=e.disabledRpcMethodPreferences)||void 0===e?void 0:e.eth_sign},getAllState:this.getState.bind(this),securityProviderRequest:this.securityProviderRequest.bind(this),getCurrentChainId:()=>this.networkController.state.providerConfig.chainId}),this.signatureController.hub.on("cancelWithReason",(({message:e,reason:t})=>{this.metaMetricsController.trackEvent({event:t,category:ae.MetaMetricsEventCategory.Transactions,properties:{action:"Sign Request",type:e.type}})})),this.swapsController=new $e.default({getBufferedGasLimit:async(e,t)=>{const{gas:r,simulationFails:n}=await this.txController.estimateGasBuffered(e.txParams,t);return{gasLimit:r,simulationFails:n}},provider:this.provider,getProviderConfig:()=>this.networkController.state.providerConfig,getTokenRatesState:()=>this.tokenRatesController.state,getCurrentChainId:()=>this.networkController.state.providerConfig.chainId,getEIP1559GasFeeEstimates:this.gasFeeController.fetchGasFeeEstimates.bind(this.gasFeeController),trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)},s.SwapsController),this.smartTransactionsController=new L.default({getNetworkClientById:this.networkController.getNetworkClientById.bind(this.networkController),onNetworkStateChange:a.subscribe.bind(a,"NetworkController:stateChange"),getNonceLock:this.txController.nonceTracker.getNonceLock.bind(this.txController.nonceTracker),confirmExternalTransaction:this.txController.confirmExternalTransaction.bind(this.txController),provider:this.provider,trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)},{supportedChainIds:[ee.CHAIN_IDS.MAINNET,ee.CHAIN_IDS.GOERLI]},s.SmartTransactionsController);const Pe=()=>this.preferencesController.store.getState().useExternalNameSources;this.nameController=new W.NameController({messenger:this.controllerMessenger.getRestricted({name:"NameController",allowedActions:[]}),providers:[new W.ENSNameProvider({reverseLookup:this.ensController.reverseResolveAddress.bind(this.ensController)}),new W.EtherscanNameProvider({isEnabled:Pe}),new W.TokenNameProvider({isEnabled:Pe}),new W.LensNameProvider({isEnabled:Pe}),new we.SnapsNameProvider({messenger:this.controllerMessenger.getRestricted({name:"SnapsNameProvider",allowedActions:["SnapController:getAll","SnapController:get","SnapController:handleRequest","PermissionController:getState"]})})],state:s.NameController});const Ee=this.controllerMessenger.getRestricted({name:"PetnamesBridge",allowedEvents:["NameController:stateChange"]});new ke.AddressBookPetnamesBridge({addressBookController:this.addressBookController,nameController:this.nameController,messenger:Ee}).init(),new be.AccountIdentitiesPetnamesBridge({preferencesController:this.preferencesController,nameController:this.nameController,messenger:Ee}).init(),this.userOperationController=new Q.UserOperationController({entrypoint:"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789",getGasFeeEstimates:this.gasFeeController.fetchGasFeeEstimates.bind(this.gasFeeController),messenger:this.controllerMessenger.getRestricted({name:"UserOperationController",allowedActions:["ApprovalController:addRequest","NetworkController:getNetworkClientById"]}),state:s.UserOperationController}),this.userOperationController.hub.on("user-operation-added",this._onUserOperationAdded.bind(this)),this.userOperationController.hub.on("transaction-updated",this._onUserOperationTransactionUpdated.bind(this)),a.subscribe("NetworkController:networkDidChange",(()=>{this.accountTracker.updateAccounts()})),a.subscribe("NetworkController:networkWillChange",(()=>{this.encryptionPublicKeyController.clearUnapproved(),this.decryptMessageController.clearUnapproved(),this.signatureController.clearUnapproved(),this.approvalController.clear(C.ethErrors.provider.userRejectedRequest())})),this.metamaskMiddleware=(0,Qe.default)({static:{eth_syncing:!1,web3_clientVersion:`MetaMask/v${i}`},version:i,getAccounts:async({origin:e},{suppressUnauthorizedError:t=!0}={})=>{if(e===ie.ORIGIN_METAMASK){const e=this.accountsController.getSelectedAccount().address;return e?[e]:[]}return this.isUnlocked()?await this.getPermittedAccounts(e,{suppressUnauthorizedError:t}):[]},processTransaction:(e,t)=>(0,lt.addDappTransaction)(this.getAddTransactionRequest({transactionParams:e,dappRequest:t})),processEthSignMessage:this.signatureController.newUnsignedMessage.bind(this.signatureController),processTypedMessage:this.signatureController.newUnsignedTypedMessage.bind(this.signatureController),processTypedMessageV3:this.signatureController.newUnsignedTypedMessage.bind(this.signatureController),processTypedMessageV4:this.signatureController.newUnsignedTypedMessage.bind(this.signatureController),processPersonalMessage:this.signatureController.newUnsignedPersonalMessage.bind(this.signatureController),processEncryptionPublicKey:this.encryptionPublicKeyController.newRequestEncryptionPublicKey.bind(this.encryptionPublicKeyController),processDecryptMessage:this.decryptMessageController.newRequestDecryptMessage.bind(this.decryptMessageController),getPendingNonce:this.getPendingNonce.bind(this),getPendingTransactionByHash:e=>this.txController.state.transactions.find((t=>t.hash===e&&t.status===Y.TransactionStatus.submitted))}),this.on("update",(e=>this._onStateUpdate(e)));const Ne={AccountTracker:this.accountTracker.store,TokenRatesController:this.tokenRatesController,DecryptMessageController:this.decryptMessageController,EncryptionPublicKeyController:this.encryptionPublicKeyController,SignatureController:this.signatureController,SwapsController:this.swapsController.store,EnsController:this.ensController.store,ApprovalController:this.approvalController,PPOMController:this.ppomController};this.store.updateStructure({AccountsController:this.accountsController,AppStateController:this.appStateController.store,AppMetadataController:this.appMetadataController.store,TransactionController:this.txController,KeyringController:this.keyringController,PreferencesController:this.preferencesController.store,MetaMetricsController:this.metaMetricsController.store,AddressBookController:this.addressBookController,CurrencyController:this.currencyRateController,NetworkController:this.networkController,AlertController:this.alertController.store,OnboardingController:this.onboardingController.store,PermissionController:this.permissionController,PermissionLogController:this.permissionLogController.store,SubjectMetadataController:this.subjectMetadataController,AnnouncementController:this.announcementController,NetworkOrderController:this.networkOrderController,AccountOrderController:this.accountOrderController,GasFeeController:this.gasFeeController,TokenListController:this.tokenListController,TokensController:this.tokensController,SmartTransactionsController:this.smartTransactionsController,NftController:this.nftController,PhishingController:this.phishingController,SelectedNetworkController:this.selectedNetworkController,LoggingController:this.loggingController,SnapController:this.snapController,CronjobController:this.cronjobController,SnapsRegistry:this.snapsRegistry,NotificationController:this.notificationController,PPOMController:this.ppomController,NameController:this.nameController,UserOperationController:this.userOperationController,...Ne}),this.memStore=new Te.default({config:{AccountsController:this.accountsController,AppStateController:this.appStateController.store,AppMetadataController:this.appMetadataController.store,NetworkController:this.networkController,KeyringController:this.keyringController,PreferencesController:this.preferencesController.store,MetaMetricsController:this.metaMetricsController.store,AddressBookController:this.addressBookController,CurrencyController:this.currencyRateController,AlertController:this.alertController.store,OnboardingController:this.onboardingController.store,PermissionController:this.permissionController,PermissionLogController:this.permissionLogController.store,SubjectMetadataController:this.subjectMetadataController,AnnouncementController:this.announcementController,NetworkOrderController:this.networkOrderController,AccountOrderController:this.accountOrderController,GasFeeController:this.gasFeeController,TokenListController:this.tokenListController,TokensController:this.tokensController,SmartTransactionsController:this.smartTransactionsController,NftController:this.nftController,SelectedNetworkController:this.selectedNetworkController,LoggingController:this.loggingController,TxController:this.txController,SnapController:this.snapController,CronjobController:this.cronjobController,SnapsRegistry:this.snapsRegistry,NotificationController:this.notificationController,NameController:this.nameController,UserOperationController:this.userOperationController,...Ne},controllerMessenger:this.controllerMessenger});const Re=[this.accountTracker.resetState,this.decryptMessageController.resetState.bind(this.decryptMessageController),this.encryptionPublicKeyController.resetState.bind(this.encryptionPublicKeyController),this.signatureController.resetState.bind(this.signatureController),this.swapsController.resetState,this.ensController.resetState,this.approvalController.clear.bind(this.approvalController)];ge.isManifestV3?!0===n&&(this.resetStates(Re),this.extension.storage.session.set({isFirstMetaMaskControllerSetup:!1})):this.resetStates(Re);!this.isUnlocked()&&this.onboardingController.store.getState().completedOnboarding,this._startUISync(),this.extension.runtime.getPlatformInfo().then((({os:e})=>{this.appStateController.setBrowserEnvironment(e,this.extension.runtime.getBrowserInfo===undefined?"chrome":"firefox")})),this.setupControllerEventSubscriptions(),this.publicConfigStore=this.createPublicConfigStore(),this.extension.runtime.onMessageExternal.addListener(Ae.onMessageReceived),(0,Ae.checkForMultipleVersionsRunning)()}triggerNetworkrequests(){this.accountTracker.start(),this.txController.startIncomingTransactionPolling(),this.preferencesController.store.getState().useCurrencyRateCheck&&this.currencyRateController.startPollingByNetworkClientId(this.networkController.state.selectedNetworkClientId),this.preferencesController.store.getState().useTokenDetection&&this.tokenListController.start()}stopNetworkRequests(){this.accountTracker.stop(),this.txController.stopIncomingTransactionPolling(),this.preferencesController.store.getState().useCurrencyRateCheck&&this.currencyRateController.stopAllPolling(),this.preferencesController.store.getState().useTokenDetection&&(this.tokenListController.stop(),this.tokenRatesController.stop())}resetStates(e){e.forEach((e=>{try{e()}catch(e){console.error(e)}}))}async getSnapKeyring(){let[e]=this.keyringController.getKeyringsByType(re.KeyringType.snap);return e||(e=await this.keyringController.addNewKeyring(re.KeyringType.snap)),e}_getSnapMetadata(e){var t;return null===(t=this.snapsRegistry.state.database)||void 0===t||null===(t=t.verifiedSnaps)||void 0===t||null===(t=t[e])||void 0===t?void 0:t.metadata}async handleSnapRequest(e){try{const t=await this.controllerMessenger.call("SnapController:handleRequest",e);return this._trackSnapExportUsage(e.snapId,e.handler,!0,e.origin),t}catch(t){throw this._trackSnapExportUsage(e.snapId,e.handler,!1,e.origin),t}}getLocale(){const{currentLocale:e}=this.preferencesController.store.getState();return e}getSnapPermissionSpecifications(){const e=(0,at.encryptorFactory)(1e4);return{...(0,j.buildSnapEndowmentSpecifications)(Object.keys(ne.ExcludedSnapEndowments)),...(0,j.buildSnapRestrictedMethodSpecifications)(Object.keys(ne.ExcludedSnapPermissions),{encrypt:e.encrypt,decrypt:e.decrypt,getLocale:this.getLocale.bind(this),clearSnapState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:clearSnapState"),getMnemonic:this.getPrimaryKeyringMnemonic.bind(this),getUnlockPromise:this.appStateController.getUnlockPromise.bind(this.appStateController),getSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:get"),handleSnapRpcRequest:this.handleSnapRequest.bind(this),getSnapState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:getSnapState"),showDialog:(e,t,r,n)=>this.approvalController.addAndShowApprovalRequest({origin:e,type:ie.SNAP_DIALOG_TYPES[t],requestData:{content:r,placeholder:n}}),showNativeNotification:(e,t)=>this.controllerMessenger.call("RateLimitController:call",e,"showNativeNotification",e,t.message),showInAppNotification:(e,t)=>this.controllerMessenger.call("RateLimitController:call",e,"showInAppNotification",e,t.message),updateSnapState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:updateSnapState"),maybeUpdatePhishingList:()=>{const{usePhishDetect:e}=this.preferencesController.store.getState();e&&this.controllerMessenger.call("PhishingController:maybeUpdateState")},isOnPhishingList:e=>{const{usePhishDetect:t}=this.preferencesController.store.getState();return!!t&&this.controllerMessenger.call("PhishingController:testOrigin",e).result},getSnapKeyring:this.getSnapKeyring.bind(this)})}}dismissNotifications(e){this.notificationController.dismiss(e)}markNotificationsAsRead(e){this.notificationController.markRead(e)}setupControllerEventSubscriptions(){let e;this.preferencesController.store.subscribe((async e=>{var t;const{currentLocale:r}=e,{chainId:n}=this.networkController.state.providerConfig;await(0,nt.updateCurrentLocale)(r),null!==(t=e.incomingTransactionsPreferences)&&void 0!==t&&t[n]?this.txController.startIncomingTransactionPolling():this.txController.stopIncomingTransactionPolling()})),this.controllerMessenger.subscribe(`${this.accountsController.name}:selectedAccountChange`,(async t=>{t.address&&t.address!==e&&(e=t.address,await this._onAccountChange(t.address))})),this.controllerMessenger.subscribe(`${this.permissionController.name}:stateChange`,(async(e,t)=>{const r=(0,Ze.getChangedAccounts)(e,t);for(const[e,t]of r.entries())this._notifyAccountsChange(e,t)}),Ze.getPermittedAccountsByOrigin),this.controllerMessenger.subscribe("NetworkController:networkDidChange",(async()=>{await this.txController.updateIncomingTransactions()})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapInstalled`,((e,t)=>{var r;const n=e.id,s=null===(r=this._getSnapMetadata(n))||void 0===r?void 0:r.category;this.metaMetricsController.trackEvent({event:ae.MetaMetricsEventName.SnapInstalled,category:ae.MetaMetricsEventCategory.Snaps,properties:{snap_id:n,version:e.version,origin:t,snap_category:s}})})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapUpdated`,((e,t,r)=>{var n;const s=e.id,o=null===(n=this._getSnapMetadata(s))||void 0===n?void 0:n.category;this.metaMetricsController.trackEvent({event:ae.MetaMetricsEventName.SnapUpdated,category:ae.MetaMetricsEventCategory.Snaps,properties:{snap_id:s,old_version:t,new_version:e.version,origin:r,snap_category:o}})})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapTerminated`,(e=>{const t=Object.values(this.approvalController.state.pendingApprovals).filter((t=>t.origin===e.id&&t.type.startsWith(ne.RestrictedMethods.snap_dialog)));for(const e of t)this.approvalController.reject(e.id,new Error("Snap was terminated."))})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapUninstalled`,(e=>{var t;const r=Object.values(this.notificationController.state.notifications).reduce(((t,r)=>(r.origin===e.id&&t.push(r.id),t)),[]);this.dismissNotifications(r);const n=e.id,s=null===(t=this._getSnapMetadata(n))||void 0===t?void 0:t.category;this.metaMetricsController.trackEvent({event:ae.MetaMetricsEventName.SnapUninstalled,category:ae.MetaMetricsEventCategory.Snaps,properties:{snap_id:n,version:e.version,snap_category:s}})}))}createPublicConfigStore(){const e=new i.ObservableStore,t=(e,{isUnlocked:t})=>({isUnlocked:t,chainId:e,networkVersion:this.deprecatedNetworkId??"loading"}),r=r=>{var n;const s=null===(n=r.networksMetadata[r.selectedNetworkClientId])||void 0===n?void 0:n.status,{chainId:o}=this.networkController.state.providerConfig;s===ee.NetworkStatus.Available&&e.putState(t(o,r))};return this.on("update",r),r(this.getState()),e}async getProviderState(e){return{isUnlocked:this.isUnlocked(),accounts:await this.getPermittedAccounts(e),...this.getProviderNetworkState(this.preferencesController.getUseRequestQueue()?e:undefined)}}getProviderNetworkState(e="metamask"){let t;if(this.preferencesController.getUseRequestQueue()){const r=this.controllerMessenger.call("SelectedNetworkController:getNetworkClientIdForDomain",e)||this.networkController.state.selectedNetworkClientId;t=this.controllerMessenger.call("NetworkController:getNetworkClientById",r).configuration.chainId}else t=this.networkController.state.providerConfig.chainId;return{chainId:t,networkVersion:this.deprecatedNetworkId??"loading"}}async updateDeprecatedNetworkId(){try{this.deprecatedNetworkId=await this.deprecatedGetNetworkId()}catch(e){console.error(e),this.deprecatedNetworkId=null}this._notifyChainChange()}async deprecatedGetNetworkId(){const e=this.controllerMessenger.call("NetworkController:getEthQuery");if(!e)throw new Error("Provider has not been initialized");return new Promise(((t,r)=>{e.sendAsync({method:"net_version"},((e,n)=>{e?r(e):t((0,Ce.convertNetworkId)(n))}))}))}getState(){const{vault:e}=this.keyringController.state,t=Boolean(e),r=this.memStore.getFlatState();return delete r.vault,{isInitialized:t,...r,snapStates:{},unencryptedSnapStates:{},snaps:Object.values(r.snaps??{}).reduce(((e,t)=>{const{sourceCode:r,auxiliaryFiles:n,...s}=t;return e[t.id]=s,e}),{})}}getApi(){const{accountsController:e,addressBookController:t,alertController:r,appStateController:n,keyringController:s,nftController:o,nftDetectionController:i,currencyRateController:a,detectTokensController:l,ensController:c,gasFeeController:d,metaMetricsController:u,networkController:h,announcementController:p,onboardingController:g,permissionController:m,preferencesController:C,swapsController:f,tokensController:y,smartTransactionsController:w,txController:k,assetsContractController:b,backup:v,approvalController:S,phishingController:A}=this;return{getState:this.getState.bind(this),setCurrentCurrency:a.setCurrentCurrency.bind(a),setUseBlockie:C.setUseBlockie.bind(C),setUseNonceField:C.setUseNonceField.bind(C),setUsePhishDetect:C.setUsePhishDetect.bind(C),setUseMultiAccountBalanceChecker:C.setUseMultiAccountBalanceChecker.bind(C),setUseSafeChainsListValidation:C.setUseSafeChainsListValidation.bind(C),setUseTokenDetection:C.setUseTokenDetection.bind(C),setUseNftDetection:C.setUseNftDetection.bind(C),setUse4ByteResolution:C.setUse4ByteResolution.bind(C),setUseCurrencyRateCheck:C.setUseCurrencyRateCheck.bind(C),setOpenSeaEnabled:C.setOpenSeaEnabled.bind(C),getUseRequestQueue:this.preferencesController.getUseRequestQueue.bind(this.preferencesController),getProviderConfig:()=>this.networkController.state.providerConfig,setSecurityAlertsEnabled:C.setSecurityAlertsEnabled.bind(C),setAddSnapAccountEnabled:C.setAddSnapAccountEnabled.bind(C),setUseExternalNameSources:C.setUseExternalNameSources.bind(C),setUseRequestQueue:this.setUseRequestQueue.bind(this),setIpfsGateway:C.setIpfsGateway.bind(C),setIsIpfsGatewayEnabled:C.setIsIpfsGatewayEnabled.bind(C),setUseAddressBarEnsResolution:C.setUseAddressBarEnsResolution.bind(C),setParticipateInMetaMetrics:u.setParticipateInMetaMetrics.bind(u),setCurrentLocale:C.setCurrentLocale.bind(C),setIncomingTransactionsPreferences:C.setIncomingTransactionsPreferences.bind(C),markPasswordForgotten:this.markPasswordForgotten.bind(this),unMarkPasswordForgotten:this.unMarkPasswordForgotten.bind(this),getRequestAccountTabIds:this.getRequestAccountTabIds,getOpenMetamaskTabsIds:this.getOpenMetamaskTabsIds,markNotificationPopupAsAutomaticallyClosed:()=>this.notificationManager.markAsAutomaticallyClosed(),requestUserApproval:S.addAndShowApprovalRequest.bind(S),addNewAccount:this.addNewAccount.bind(this),getSeedPhrase:this.getSeedPhrase.bind(this),resetAccount:this.resetAccount.bind(this),removeAccount:this.removeAccount.bind(this),importAccountWithStrategy:this.importAccountWithStrategy.bind(this),getAccountsBySnapId:e=>(0,it.getAccountsBySnapId)(this,e),connectHardware:this.connectHardware.bind(this),forgetDevice:this.forgetDevice.bind(this),checkHardwareStatus:this.checkHardwareStatus.bind(this),unlockHardwareWalletAccount:this.unlockHardwareWalletAccount.bind(this),attemptLedgerTransportCreation:this.attemptLedgerTransportCreation.bind(this),submitQRHardwareCryptoHDKey:s.submitQRCryptoHDKey.bind(s),submitQRHardwareCryptoAccount:s.submitQRCryptoAccount.bind(s),cancelSyncQRHardware:s.cancelQRSynchronization.bind(s),submitQRHardwareSignature:s.submitQRSignature.bind(s),cancelQRHardwareSignRequest:s.cancelQRSignRequest.bind(s),submitPassword:this.submitPassword.bind(this),verifyPassword:this.verifyPassword.bind(this),setProviderType:e=>(this.selectedNetworkController.setNetworkClientIdForMetamask(e),this.networkController.setProviderType(e)),setActiveNetwork:e=>(this.selectedNetworkController.setNetworkClientIdForMetamask(e),this.networkController.setActiveNetwork(e)),rollbackToPreviousProvider:h.rollbackToPreviousProvider.bind(h),removeNetworkConfiguration:h.removeNetworkConfiguration.bind(h),upsertNetworkConfiguration:this.networkController.upsertNetworkConfiguration.bind(this.networkController),getCurrentNetworkEIP1559Compatibility:this.networkController.getEIP1559Compatibility.bind(this.networkController),setSelectedAddress:e=>{const t=this.accountsController.getAccountByAddress(e);if(!t)throw new Error(`No account found for address: ${e}`);this.accountsController.setSelectedAccount(t.id),this.preferencesController.setSelectedAddress(e)},addToken:y.addToken.bind(y),updateTokenType:y.updateTokenType.bind(y),setFeatureFlag:C.setFeatureFlag.bind(C),setPreference:C.setPreference.bind(C),addKnownMethodData:C.addKnownMethodData.bind(C),setDismissSeedBackUpReminder:C.setDismissSeedBackUpReminder.bind(C),setDisabledRpcMethodPreference:C.setDisabledRpcMethodPreference.bind(C),getRpcMethodPreferences:C.getRpcMethodPreferences.bind(C),setAdvancedGasFee:C.setAdvancedGasFee.bind(C),setTheme:C.setTheme.bind(C),setTransactionSecurityCheckEnabled:C.setTransactionSecurityCheckEnabled.bind(C),setSnapsAddSnapAccountModalDismissed:C.setSnapsAddSnapAccountModalDismissed.bind(C),setSelectedInternalAccount:e=>{const t=this.accountsController.getAccount(e);t&&(this.preferencesController.setSelectedAddress(t.address),this.accountsController.setSelectedAccount(e))},setAccountName:e.setAccountName.bind(e),setAccountLabel:(e,t)=>{this.preferencesController.setAccountLabel(e,t);const r=this.accountsController.getAccountByAddress(e);if(r===undefined)throw new Error(`No account found for address: ${e}`);this.accountsController.setAccountName(r.id,t)},getTokenStandardAndDetails:this.getTokenStandardAndDetails.bind(this),getTokenSymbol:this.getTokenSymbol.bind(this),addNft:o.addNft.bind(o),addNftVerifyOwnership:o.addNftVerifyOwnership.bind(o),removeAndIgnoreNft:o.removeAndIgnoreNft.bind(o),removeNft:o.removeNft.bind(o),checkAndUpdateAllNftsOwnershipStatus:o.checkAndUpdateAllNftsOwnershipStatus.bind(o),checkAndUpdateSingleNftOwnershipStatus:o.checkAndUpdateSingleNftOwnershipStatus.bind(o),isNftOwner:o.isNftOwner.bind(o),setAddressBook:t.set.bind(t),removeFromAddressBook:t.delete.bind(t),setLastActiveTime:n.setLastActiveTime.bind(n),setDefaultHomeActiveTabName:n.setDefaultHomeActiveTabName.bind(n),setConnectedStatusPopoverHasBeenShown:n.setConnectedStatusPopoverHasBeenShown.bind(n),setRecoveryPhraseReminderHasBeenShown:n.setRecoveryPhraseReminderHasBeenShown.bind(n),setRecoveryPhraseReminderLastShown:n.setRecoveryPhraseReminderLastShown.bind(n),setTermsOfUseLastAgreed:n.setTermsOfUseLastAgreed.bind(n),setSurveyLinkLastClickedOrClosed:n.setSurveyLinkLastClickedOrClosed.bind(n),setSnapsInstallPrivacyWarningShownStatus:n.setSnapsInstallPrivacyWarningShownStatus.bind(n),setOutdatedBrowserWarningLastShown:n.setOutdatedBrowserWarningLastShown.bind(n),setShowTestnetMessageInDropdown:n.setShowTestnetMessageInDropdown.bind(n),setShowBetaHeader:n.setShowBetaHeader.bind(n),setShowProductTour:n.setShowProductTour.bind(n),setShowAccountBanner:n.setShowAccountBanner.bind(n),setShowNetworkBanner:n.setShowNetworkBanner.bind(n),updateNftDropDownState:n.updateNftDropDownState.bind(n),setFirstTimeUsedNetwork:n.setFirstTimeUsedNetwork.bind(n),tryReverseResolveAddress:c.reverseResolveAddress.bind(c),setLocked:this.setLocked.bind(this),createNewVaultAndKeychain:this.createNewVaultAndKeychain.bind(this),createNewVaultAndRestore:this.createNewVaultAndRestore.bind(this),exportAccount:this.exportAccount.bind(this),updateTransaction:k.updateTransaction.bind(k),approveTransactionsWithSameNonce:k.approveTransactionsWithSameNonce.bind(k),createCancelTransaction:this.createCancelTransaction.bind(this),createSpeedUpTransaction:this.createSpeedUpTransaction.bind(this),estimateGas:this.estimateGas.bind(this),getNextNonce:this.getNextNonce.bind(this),addTransaction:(e,t)=>(0,lt.addTransaction)(this.getAddTransactionRequest({transactionParams:e,transactionOptions:t,waitForSubmit:!1}),this.updateSecurityAlertResponseByTxId.bind(this)),addTransactionAndWaitForPublish:(e,t)=>(0,lt.addTransaction)(this.getAddTransactionRequest({transactionParams:e,transactionOptions:t,waitForSubmit:!0}),this.updateSecurityAlertResponseByTxId.bind(this)),createTransactionEventFragment:fe.createTransactionEventFragmentWithTxId.bind(null,this.getTransactionMetricsRequest()),getTransactions:this.txController.getTransactions.bind(this.txController),updateEditableParams:this.txController.updateEditableParams.bind(this.txController),updateTransactionGasFees:k.updateTransactionGasFees.bind(k),updateTransactionSendFlowHistory:k.updateTransactionSendFlowHistory.bind(k),updatePreviousGasParams:k.updatePreviousGasParams.bind(k),abortTransactionSigning:k.abortTransactionSigning.bind(k),decryptMessage:this.decryptMessageController.decryptMessage.bind(this.decryptMessageController),decryptMessageInline:this.decryptMessageController.decryptMessageInline.bind(this.decryptMessageController),cancelDecryptMessage:this.decryptMessageController.cancelDecryptMessage.bind(this.decryptMessageController),encryptionPublicKey:this.encryptionPublicKeyController.encryptionPublicKey.bind(this.encryptionPublicKeyController),cancelEncryptionPublicKey:this.encryptionPublicKeyController.cancelEncryptionPublicKey.bind(this.encryptionPublicKeyController),setSeedPhraseBackedUp:g.setSeedPhraseBackedUp.bind(g),completeOnboarding:g.completeOnboarding.bind(g),setFirstTimeFlowType:g.setFirstTimeFlowType.bind(g),setAlertEnabledness:r.setAlertEnabledness.bind(r),setUnconnectedAccountAlertShown:r.setUnconnectedAccountAlertShown.bind(r),setWeb3ShimUsageAlertDismissed:r.setWeb3ShimUsageAlertDismissed.bind(r),removePermissionsFor:this.removePermissionsFor,approvePermissionsRequest:this.acceptPermissionsRequest,rejectPermissionsRequest:this.rejectPermissionsRequest,...(0,Ze.getPermissionBackgroundApiMethods)(m),disableSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:disable"),enableSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:enable"),updateSnap:(e,t)=>(this.controllerMessenger.call("SnapController:install",e,t),null),removeSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:remove"),handleSnapRequest:this.handleSnapRequest.bind(this),revokeDynamicSnapPermissions:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:revokeDynamicPermissions"),dismissNotifications:this.dismissNotifications.bind(this),markNotificationsAsRead:this.markNotificationsAsRead.bind(this),disconnectOriginFromSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:disconnectOrigin"),updateNetworksList:this.updateNetworksList.bind(this),updateAccountsList:this.updateAccountsList.bind(this),updateHiddenAccountsList:this.updateHiddenAccountsList.bind(this),getPhishingResult:async e=>(await A.maybeUpdateState(),A.test(e)),fetchAndSetQuotes:f.fetchAndSetQuotes.bind(f),setSelectedQuoteAggId:f.setSelectedQuoteAggId.bind(f),resetSwapsState:f.resetSwapsState.bind(f),setSwapsTokens:f.setSwapsTokens.bind(f),clearSwapsQuotes:f.clearSwapsQuotes.bind(f),setApproveTxId:f.setApproveTxId.bind(f),setTradeTxId:f.setTradeTxId.bind(f),setSwapsTxGasPrice:f.setSwapsTxGasPrice.bind(f),setSwapsTxGasLimit:f.setSwapsTxGasLimit.bind(f),setSwapsTxMaxFeePerGas:f.setSwapsTxMaxFeePerGas.bind(f),setSwapsTxMaxFeePriorityPerGas:f.setSwapsTxMaxFeePriorityPerGas.bind(f),safeRefetchQuotes:f.safeRefetchQuotes.bind(f),stopPollingForQuotes:f.stopPollingForQuotes.bind(f),setBackgroundSwapRouteState:f.setBackgroundSwapRouteState.bind(f),resetPostFetchState:f.resetPostFetchState.bind(f),setSwapsErrorKey:f.setSwapsErrorKey.bind(f),setInitialGasEstimate:f.setInitialGasEstimate.bind(f),setCustomApproveTxData:f.setCustomApproveTxData.bind(f),setSwapsLiveness:f.setSwapsLiveness.bind(f),setSwapsFeatureFlags:f.setSwapsFeatureFlags.bind(f),setSwapsUserFeeLevel:f.setSwapsUserFeeLevel.bind(f),setSwapsQuotesPollingLimitEnabled:f.setSwapsQuotesPollingLimitEnabled.bind(f),setSmartTransactionsOptInStatus:w.setOptInState.bind(w),fetchSmartTransactionFees:w.getFees.bind(w),clearSmartTransactionFees:w.clearFees.bind(w),submitSignedTransactions:w.submitSignedTransactions.bind(w),cancelSmartTransaction:w.cancelSmartTransaction.bind(w),fetchSmartTransactionsLiveness:w.fetchLiveness.bind(w),updateSmartTransaction:w.updateSmartTransaction.bind(w),setStatusRefreshInterval:w.setStatusRefreshInterval.bind(w),trackMetaMetricsEvent:u.trackEvent.bind(u),trackMetaMetricsPage:u.trackPage.bind(u),createEventFragment:u.createEventFragment.bind(u),updateEventFragment:u.updateEventFragment.bind(u),finalizeEventFragment:u.finalizeEventFragment.bind(u),resolvePendingApproval:this.resolvePendingApproval,rejectPendingApproval:this.rejectPendingApproval,updateViewedNotifications:p.updateViewed.bind(p),getGasFeeEstimatesAndStartPolling:d.getGasFeeEstimatesAndStartPolling.bind(d),disconnectGasFeeEstimatePoller:d.disconnectPoller.bind(d),getGasFeeTimeEstimate:d.getTimeEstimate.bind(d),addPollingTokenToAppState:n.addPollingToken.bind(n),removePollingTokenFromAppState:n.removePollingToken.bind(n),backupUserData:v.backupUserData.bind(v),restoreUserData:v.restoreUserData.bind(v),detectNewTokens:l.detectNewTokens.bind(l),detectNfts:i.detectNfts.bind(i),addDetectedTokens:y.addDetectedTokens.bind(y),addImportedTokens:y.addTokens.bind(y),ignoreTokens:y.ignoreTokens.bind(y),getBalancesInSingleCall:b.getBalancesInSingleCall.bind(b),throwTestError:this.throwTestError.bind(this),updateProposedNames:this.nameController.updateProposedNames.bind(this.nameController),setName:this.nameController.setName.bind(this.nameController)}}async exportAccount(e,t){return await this.verifyPassword(t),this.keyringController.exportAccount(t,e)}async getTokenStandardAndDetails(e,t,r){var n,s;const{tokenList:o}=this.tokenListController.state,{tokens:i}=this.tokensController.state,a={...he.STATIC_MAINNET_TOKEN_LIST[e.toLowerCase()]||{},...o[e.toLowerCase()]||{},...i.find((({address:t})=>(0,de.isEqualCaseInsensitive)(t,e)))||{}},l=(0,de.isEqualCaseInsensitive)(a.standard,X.TokenStandard.ERC20)||!0===a.erc20,c=!(r||(0,de.isEqualCaseInsensitive)(a.standard,X.TokenStandard.ERC1155)||(0,de.isEqualCaseInsensitive)(a.standard,X.TokenStandard.ERC721)||a.erc721),d=a.decimals!==undefined&&a.symbol;let u;if(l||c&&d)try{const r=await(0,ce.fetchTokenBalance)(e,t,this.provider);u={address:e,balance:r,standard:X.TokenStandard.ERC20,decimals:a.decimals,symbol:a.symbol}}catch(e){y.default.warning(`Failed to get token balance. Error: ${e}`)}u===undefined&&(u=await this.assetsContractController.getTokenStandardAndDetails(e,t,r));if((0,de.isEqualCaseInsensitive)(u.standard,X.TokenStandard.ERC1155))try{const n=await(0,ce.fetchERC1155Balance)(e,t,r,this.provider),s=null!=n&&n._hex?parseInt(n._hex,16).toString():null;u={...u,balance:s}}catch(e){y.default.warning("Failed to get token balance. Error:",e)}return{...u,decimals:null===(n=u)||void 0===n||null===(n=n.decimals)||void 0===n?void 0:n.toString(10),balance:null===(s=u)||void 0===s||null===(s=s.balance)||void 0===s?void 0:s.toString(10)}}async getTokenSymbol(e){try{const t=await this.assetsContractController.getTokenStandardAndDetails(e);return null==t?void 0:t.symbol}catch(e){return null}}async createNewVaultAndKeychain(e){const t=await this.createVaultMutex.acquire();try{const t=await this.keyringController.createNewVaultAndKeychain(e),r=await this.keyringController.getAccounts();return this.preferencesController.setAddresses(r),this.selectFirstAccount(),t}finally{t()}}async createNewVaultAndRestore(e,r){const n=await this.createVaultMutex.acquire();try{const n=t.from(r);this.preferencesController.setAddresses([]),this.permissionController.clearState(),this.snapController.clearState(),this.notificationController.clear(),this.accountTracker.clearAccounts(),this.txController.clearUnapprovedTransactions();const i=await this.keyringController.createNewVaultAndRestore(e,this._convertMnemonicToWordlistIndices(n)),{chainId:a}=this.networkController.state.providerConfig,l=new S.default(this.provider),c=await this.keyringController.getAccounts();let d=c[c.length-1];for(let e=c.length;;e++){if("0x0"===await this.getBalance(d,l)){var s,o;await this.detectTokensController.detectNewTokens({selectedAddress:d});const t=null===(s=this.tokensController.state.allTokens)||void 0===s||null===(s=s[a])||void 0===s?void 0:s[d],r=null===(o=this.tokensController.state.allDetectedTokens)||void 0===o||null===(o=o[a])||void 0===o?void 0:o[d];if(0===((null==t?void 0:t.length)??0)&&0===((null==r?void 0:r.length)??0)){1!==e&&await this.removeAccount(d);break}}({addedAccountAddress:d}=await this.keyringController.addNewAccount(e))}return this.setLedgerTransportPreference(),this.selectFirstAccount(),i}finally{n()}}_convertMnemonicToWordlistIndices(e){const t=e.toString().split(" ").map((e=>V.wordlist.indexOf(e)));return new Uint8Array(new Uint16Array(t).buffer)}_convertEnglishWordlistIndicesToCodepoints(e){return t.from(Array.from(new Uint16Array(e.buffer)).map((e=>V.wordlist[e])).join(" "))}getBalance(e,t){return new Promise(((r,n)=>{const s=this.accountTracker.store.getState().accounts[e];s&&s.balance?r(s.balance):t.getBalance(e,((e,t)=>{e?(n(e),y.default.error(e)):r(t||"0x0")}))}))}async submitPassword(e){await this.keyringController.submitPassword(e);try{await this.blockTracker.checkForLatestBlock()}catch(e){y.default.error("Error while unlocking extension.",e)}await this.accountsController.updateAccounts(),this.setLedgerTransportPreference()}async _loginUser(e){try{await this.submitPassword(e),await this.accountTracker.updateAccountsAllActiveNetworks()}finally{this._startUISync()}}_startUISync(){this.emit("startUISync"),this.startUISync=!0,this.memStore.subscribe(this.sendUpdate.bind(this))}async submitEncryptionKey(){try{const{loginToken:e,loginSalt:t}=await this.extension.storage.session.get(["loginToken","loginSalt"]);if(e&&t){const{vault:r}=this.keyringController.state;if(JSON.parse(r).salt!==t)return console.warn("submitEncryptionKey: Stored salt and vault salt do not match"),void await this.clearLoginArtifacts();await this.keyringController.submitEncryptionKey(e,t)}}catch(e){throw await this.clearLoginArtifacts(),e}}async clearLoginArtifacts(){await this.extension.storage.session.remove(["loginToken","loginSalt"])}async verifyPassword(e){await this.keyringController.verifyPassword(e)}selectFirstAccount(){const{identities:e}=this.preferencesController.store.getState(),[t]=Object.keys(e);this.preferencesController.setSelectedAddress(t);const[r]=this.accountsController.listAccounts();this.accountsController.setSelectedAccount(r.id)}getPrimaryKeyringMnemonic(){const[e]=this.keyringController.getKeyringsByType(re.KeyringType.hdKeyTree);if(!e.mnemonic)throw new Error("Primary keyring mnemonic unavailable.");return e.mnemonic}async getKeyringForDevice(e,t=null){var r,n,s,o;const i=null===(r=this.opts.overrides)||void 0===r?void 0:r.keyrings;let a=null;switch(e){case te.HardwareDeviceNames.trezor:a=(null==i||null===(n=i.trezor)||void 0===n?void 0:n.type)||w.TrezorKeyring.type;break;case te.HardwareDeviceNames.ledger:a=(null==i||null===(s=i.ledger)||void 0===s?void 0:s.type)||k.LedgerKeyring.type;break;case te.HardwareDeviceNames.qr:a=v.MetaMaskKeyring.type;break;case te.HardwareDeviceNames.lattice:a=(null==i||null===(o=i.lattice)||void 0===o?void 0:o.type)||b.default.type;break;default:throw new Error("MetamaskController:getKeyringForDevice - Unknown device")}let[l]=await this.keyringController.getKeyringsByType(a);if(l||(l=await this.keyringController.addNewKeyring(a)),t&&l.setHdPath&&l.setHdPath(t),e===te.HardwareDeviceNames.lattice&&(l.appName="MetaMask"),e===te.HardwareDeviceNames.trezor){const e=l.getModel();this.appStateController.setTrezorModel(e)}return l.network=this.networkController.state.providerConfig.type,l}async attemptLedgerTransportCreation(){const e=await this.getKeyringForDevice(te.HardwareDeviceNames.ledger);return await e.attemptMakeApp()}async connectHardware(e,t,r){const n=await this.getKeyringForDevice(e,r);let s=[];switch(t){case-1:s=await n.getPreviousPage();break;case 1:s=await n.getNextPage();break;default:s=await n.getFirstPage()}const o=await this.keyringController.getAccounts(),i=[...new Set(o.concat(s.map((e=>e.address.toLowerCase()))))];return this.accountTracker.syncWithAddresses(i),s}async checkHardwareStatus(e,t){return(await this.getKeyringForDevice(e,t)).isUnlocked()}async forgetDevice(e){const t=await this.getKeyringForDevice(e);for(const e of t.accounts)await this.removeAccount(e);return t.forgetDevice(),!0}async getAccountType(e){switch(await this.keyringController.getAccountKeyringType(e)){case re.KeyringType.trezor:case re.KeyringType.lattice:case re.KeyringType.qr:case re.KeyringType.ledger:return"hardware";case re.KeyringType.imported:return"imported";case re.KeyringType.snap:return"snap";default:return"MetaMask"}}async getDeviceModel(e){const t=await this.keyringController.getKeyringForAccount(e);switch(t.type){case re.KeyringType.trezor:return t.getModel();case re.KeyringType.qr:return t.getName();case re.KeyringType.ledger:return te.HardwareDeviceNames.ledger;case re.KeyringType.lattice:return te.HardwareDeviceNames.lattice;default:return undefined}}getAccountLabel(e,t,r){return`${e[0].toUpperCase()}${e.slice(1)} ${parseInt(t,10)+1} ${r||""}`.trim()}async unlockHardwareWalletAccount(e,t,r,n){const s=await this.getKeyringForDevice(t,r);s.setAccountToUnlock(e);const o=await this.keyringController.getAccounts(),i=await this.keyringController.addNewAccountForKeyring(s),a=await this.keyringController.getAccounts();this.preferencesController.setAddresses(a),a.forEach((r=>{if(!o.includes(r)){const o=this.getAccountLabel(t===te.HardwareDeviceNames.qr?s.getName():t,e,n);this.preferencesController.setAccountLabel(r,o),this.preferencesController.setSelectedAddress(r);const i=this.accountsController.getAccountByAddress(r);this.accountsController.setAccountName(i.id,o)}}));const l=this.accountsController.listAccounts(),{identities:c}=this.preferencesController.store.getState();return{...i,identities:c,accounts:l}}async addNewAccount(e){const t=await this.keyringController.getAccounts(),{addedAccountAddress:r}=await this.keyringController.addNewAccount(e);return t.includes(r)||this.preferencesController.setSelectedAddress(r),r}async getSeedPhrase(e){return this._convertEnglishWordlistIndicesToCodepoints(await this.keyringController.exportSeedPhrase(e))}async resetAccount(){const e=this.accountsController.getSelectedAccount().address;return this.txController.wipeTransactions(!0,e),this.networkController.resetConnection(),e}async getPermittedAccounts(e,{suppressUnauthorizedError:t=!0}={}){try{return await this.permissionController.executeRestrictedMethod(e,ne.RestrictedMethods.eth_accounts)}catch(e){if(t&&e.code===C.errorCodes.provider.unauthorized)return[];throw e}}removeAllAccountPermissions(e){this.permissionController.updatePermissionsByCaveat(ne.CaveatTypes.restrictReturnedAccounts,(t=>Ze.CaveatMutatorFactories[ne.CaveatTypes.restrictReturnedAccounts].removeAccount(e,t)))}async removeAccount(e){this.removeAllAccountPermissions(e);const t=await this.keyringController.getKeyringForAccount(e);await this.keyringController.removeAccount(e);const r=t?await t.getAccounts():{};var n;0===(null==r?void 0:r.length)&&(null===(n=t.destroy)||void 0===n||n.call(t));return e}async importAccountWithStrategy(e,t){const{importedAccountAddress:r}=await this.keyringController.importAccountWithStrategy(e,t);this.preferencesController.setSelectedAddress(r)}getAddTransactionRequest({transactionParams:e,transactionOptions:t,dappRequest:r}){var n;return{dappRequest:r,networkClientId:this.networkController.state.selectedNetworkClientId,selectedAccount:this.accountsController.getSelectedAccount(),transactionController:this.txController,transactionOptions:t,transactionParams:e,userOperationController:this.userOperationController,ppomController:this.ppomController,securityAlertsEnabled:null===(n=this.preferencesController.store.getState())||void 0===n?void 0:n.securityAlertsEnabled,chainId:this.networkController.state.providerConfig.chainId}}async getCurrentAccountEIP1559Compatibility(){return!0}async createCancelTransaction(e,t,r){await this.txController.stopTransaction(e,t,r);return this.getState()}async createSpeedUpTransaction(e,t,r){await this.txController.speedUpTransaction(e,t,r);return this.getState()}async estimateGas(e){return new Promise(((t,r)=>new A.default(this.provider).estimateGas(e,((e,n)=>e?r(e):t(n.toString(16))))))}async updateSecurityAlertResponseByTxId(e,t){let r=!1;for(;!r;)r=X.SIGNING_METHODS.includes(e.method)?Object.values(this.signatureController.messages).find((t=>{var r;return(null===(r=t.securityAlertResponse)||void 0===r?void 0:r.securityAlertId)===e.securityAlertResponse.securityAlertId})):this.txController.state.transactions.find((t=>{var r;return(null===(r=t.securityAlertResponse)||void 0===r?void 0:r.securityAlertId)===e.securityAlertResponse.securityAlertId})),r||await new Promise((e=>setTimeout(e,100)));X.SIGNING_METHODS.includes(e.method)?this.appStateController.addSignatureSecurityAlertResponse(t):this.txController.updateSecurityAlertResponse(r.id,t)}markPasswordForgotten(){this.preferencesController.setPasswordForgotten(!0),this.sendUpdate()}unMarkPasswordForgotten(){this.preferencesController.setPasswordForgotten(!1),this.sendUpdate()}setUseRequestQueue(e){this.preferencesController.setUseRequestQueue(e),this.selectedNetworkController.update((t=>{t.perDomainNetwork=e}))}setupUntrustedCommunication({connectionStream:e,sender:t,subjectType:r}){const{usePhishDetect:n}=this.preferencesController.store.getState();let s;if(s=r||(t.id&&t.id!==this.extension.runtime.id?F.SubjectType.Extension:F.SubjectType.Website),t.url){const{hostname:r}=new URL(t.url);this.phishingController.maybeUpdateState();const s=this.phishingController.test(r);if(n&&null!=s&&s.result)return this.sendPhishingWarning(e,r),void this.metaMetricsController.trackEvent({event:ae.MetaMetricsEventName.PhishingPageDisplayed,category:ae.MetaMetricsEventCategory.Phishing,properties:{url:r}})}const o=(0,Le.setupMultiplex)(e);this.setupProviderConnection(o.createStream("metamask-provider"),t,s),t.url&&this.setupPublicConfig(o.createStream("publicConfig"))}setupTrustedCommunication(e,t){const r=(0,Le.setupMultiplex)(e);this.setupControllerConnection(r.createStream("controller")),this.setupProviderConnection(r.createStream("provider"),t,F.SubjectType.Internal)}setupPhishingCommunication({connectionStream:e}){const{usePhishDetect:t}=this.preferencesController.store.getState();if(!t)return;const r=(0,Le.setupMultiplex)(e).createStream("metamask-phishing-safelist");r.on("data",(0,We.default)({safelistPhishingDomain:this.safelistPhishingDomain.bind(this),backToSafetyPhishingWarning:this.backToSafetyPhishingWarning.bind(this)},r))}sendPhishingWarning(e,t){(0,Le.setupMultiplex)(e).createStream("phishing").write({hostname:t})}setupControllerConnection(e){const t=this.getApi();this.activeControllerConnections+=1,this.emit("controllerConnectionChanged",this.activeControllerConnections),e.on("data",(0,We.default)(t,e,this.store,this.localStoreApiWrapper));const r=t=>{e._writableState.ended||e.write({jsonrpc:"2.0",method:"sendUpdate",params:[t]})};this.on("update",r);const n=()=>{e._writableState.ended||e.write({jsonrpc:"2.0",method:"startUISync"})};this.startUISync?n():this.once("startUISync",n),e.on("end",(()=>{this.activeControllerConnections-=1,this.emit("controllerConnectionChanged",this.activeControllerConnections),this.removeListener("update",r)}))}setupProviderConnection(e,t,r){let n,o;n=r===F.SubjectType.Internal?ie.ORIGIN_METAMASK:r===F.SubjectType.Snap?t.snapId:new URL(t.url).origin,t.id&&t.id!==this.extension.runtime.id&&this.subjectMetadataController.addSubjectMetadata({origin:n,extensionId:t.id,subjectType:F.SubjectType.Extension}),t.tab&&t.tab.id&&(o=t.tab.id);const i=this.setupProviderEngine({origin:n,sender:t,subjectType:r,tabId:o}),a=(0,c.createEngineStream)({engine:i}),l=this.addConnection(n,{engine:i});(0,s.default)(e,a,e,(e=>{i._middleware.forEach((e=>{e.destroy&&"function"==typeof e.destroy&&e.destroy()})),l&&this.removeConnection(n,l),e&&y.default.error(e)}))}setupSnapProvider(e,t){this.setupUntrustedCommunication({connectionStream:t,sender:{snapId:e},subjectType:F.SubjectType.Snap})}setupProviderEngine({origin:e,subjectType:t,sender:r,tabId:n}){const s=new l.JsonRpcEngine,{blockTracker:o,provider:i}=this;s.push((0,Re.default)({origin:e})),s.push((0,x.createSelectedNetworkMiddleware)(this.controllerMessenger));const{selectedNetworkClientId:a}=this.networkController.state;this.selectedNetworkController.getNetworkClientIdForDomain(e)===undefined&&this.selectedNetworkController.setNetworkClientIdForDomain(e,a);let c=i;this.preferencesController.getUseRequestQueue()&&(c=this.selectedNetworkController.getProviderAndBlockTracker(e).provider);const u=(0,z.createQueuedRequestMiddleware)({messenger:this.controllerMessenger,useRequestQueue:this.preferencesController.getUseRequestQueue.bind(this.preferencesController)});s.push(u);const h=(0,g.default)({provider:i,blockTracker:o}),p=(0,m.default)({provider:i,blockTracker:o});return p.events.on("notification",(e=>s.emit("notification",e))),ge.isManifestV3&&s.push((0,Pe.default)()),n&&s.push((0,Ie.default)({tabId:n})),s.push((0,Ee.default)({origin:e})),s.push(this.permissionLogController.createMiddleware()),s.push((0,ve.createPPOMMiddleware)(this.ppomController,this.preferencesController,this.networkController,this.appStateController,this.updateSecurityAlertResponseByTxId.bind(this))),s.push((0,et.default)({trackEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),getMetricsState:this.metaMetricsController.store.getState.bind(this.metaMetricsController.store),securityProviderRequest:this.securityProviderRequest.bind(this),getAccountType:this.getAccountType.bind(this),getDeviceModel:this.getDeviceModel.bind(this),snapAndHardwareMessenger:this.controllerMessenger.getRestricted({name:"SnapAndHardwareMessenger",allowedActions:["KeyringController:getKeyringForAccount","SnapController:get","AccountsController:getSelectedAccount"]}),appStateController:this.appStateController})),t===F.SubjectType.Website&&s.push((0,Fe.default)({location:r.url,registerOnboarding:this.onboardingController.registerOnboarding})),s.push((0,Ne.createMethodMiddleware)({origin:e,subjectType:t,addSubjectMetadata:this.subjectMetadataController.addSubjectMetadata.bind(this.subjectMetadataController),metamaskState:this.getState(),getProviderState:this.getProviderState.bind(this),getUnlockPromise:this.appStateController.getUnlockPromise.bind(this.appStateController),handleWatchAssetRequest:this.handleWatchAssetRequest.bind(this),requestUserApproval:this.approvalController.addAndShowApprovalRequest.bind(this.approvalController),startApprovalFlow:this.approvalController.startFlow.bind(this.approvalController),endApprovalFlow:this.approvalController.endFlow.bind(this.approvalController),setApprovalFlowLoadingText:this.approvalController.setFlowLoadingText.bind(this.approvalController),showApprovalSuccess:this.approvalController.success.bind(this.approvalController),showApprovalError:this.approvalController.error.bind(this.approvalController),sendMetrics:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),getAccounts:this.getPermittedAccounts.bind(this,e),getPermissionsForOrigin:this.permissionController.getPermissions.bind(this.permissionController,e),hasPermission:this.permissionController.hasPermission.bind(this.permissionController,e),requestAccountsPermission:this.permissionController.requestPermissions.bind(this.permissionController,{origin:e},{eth_accounts:{}}),requestPermissionsForOrigin:this.permissionController.requestPermissions.bind(this.permissionController,{origin:e}),revokePermissionsForOrigin:t=>{try{this.permissionController.revokePermissions({[e]:t})}catch(e){console.log(e)}},getCurrentChainId:()=>this.networkController.state.providerConfig.chainId,getCurrentRpcUrl:()=>this.networkController.state.providerConfig.rpcUrl,getNetworkConfigurations:()=>this.networkController.state.networkConfigurations,upsertNetworkConfiguration:this.networkController.upsertNetworkConfiguration.bind(this.networkController),setActiveNetwork:e=>{this.selectedNetworkController.setNetworkClientIdForMetamask(e),this.networkController.setActiveNetwork(e)},findNetworkClientIdByChainId:this.networkController.findNetworkClientIdByChainId.bind(this.networkController),findNetworkConfigurationBy:this.findNetworkConfigurationBy.bind(this),getNetworkClientIdForDomain:this.selectedNetworkController.getNetworkClientIdForDomain.bind(this.selectedNetworkController),setNetworkClientIdForDomain:this.selectedNetworkController.setNetworkClientIdForDomain.bind(this.selectedNetworkController),getUseRequestQueue:this.preferencesController.getUseRequestQueue.bind(this.preferencesController),getProviderConfig:()=>this.networkController.state.providerConfig,setProviderType:e=>(this.selectedNetworkController.setNetworkClientIdForMetamask(e),this.networkController.setProviderType(e)),getWeb3ShimUsageState:this.alertController.getWeb3ShimUsageState.bind(this.alertController),setWeb3ShimUsageRecorded:this.alertController.setWeb3ShimUsageRecorded.bind(this.alertController)})),s.push((0,q.createSnapsMethodMiddleware)(t===F.SubjectType.Snap,{getUnlockPromise:this.appStateController.getUnlockPromise.bind(this.appStateController),getSnaps:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:getPermitted",e),requestPermissions:async t=>await this.permissionController.requestPermissions({origin:e},t),getPermissions:this.permissionController.getPermissions.bind(this.permissionController,e),getSnapFile:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:getFile",e),installSnaps:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:install",e),getIsLocked:()=>!this.appStateController.isUnlocked(),hasPermission:this.permissionController.hasPermission.bind(this.permissionController,e),getSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:get"),getAllSnaps:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:getAll"),handleSnapRpcRequest:t=>this.handleSnapRequest({...t,origin:e}),getAllowedKeyringMethods:(0,ye.keyringSnapPermissionsBuilder)(this.subjectMetadataController,e)})),s.push(h),s.push(p.middleware),t!==F.SubjectType.Internal&&s.push(this.permissionController.createPermissionMiddleware({origin:e})),s.push(this.metamaskMiddleware),s.push((0,d.providerAsMiddleware)(c)),s}setupPublicConfig(e){const t=(0,a.storeAsStream)(this.publicConfigStore);(0,s.default)(t,e,(e=>{t.destroy(),e&&y.default.error(e)}))}addConnection(e,{engine:t}){if(e===ie.ORIGIN_METAMASK)return null;this.connections[e]||(this.connections[e]={});const r=(0,T.default)();return this.connections[e][r]={engine:t},r}removeConnection(e,t){const r=this.connections[e];r&&(delete r[t],0===Object.keys(r).length&&delete this.connections[e])}removeAllConnections(e){const t=this.connections[e];t&&Object.keys(t).forEach((t=>{this.removeConnection(e,t)}))}notifyConnections(e,t){const r=this.connections[e];r&&Object.values(r).forEach((e=>{e.engine&&e.engine.emit("notification",t)}))}notifyAllConnections(e){const t="function"==typeof e?t=>e(t):()=>e;Object.keys(this.connections).forEach((e=>{Object.values(this.connections[e]).forEach((async r=>{r.engine&&r.engine.emit("notification",await t(e))}))}))}async _onKeyringControllerUpdate(e){const{keyrings:t}=e,r=t.reduce(((e,{accounts:t})=>e.concat(t)),[]);r.length&&(this.preferencesController.syncAddresses(r),this.accountTracker.syncWithAddresses(r))}_onUnlock(){this.notifyAllConnections((async e=>({method:Ze.NOTIFICATION_NAMES.unlockStateChanged,params:{isUnlocked:!0,accounts:await this.getPermittedAccounts(e)}}))),this.unMarkPasswordForgotten(),this.emit("unlock")}_onLock(){this.notifyAllConnections({method:Ze.NOTIFICATION_NAMES.unlockStateChanged,params:{isUnlocked:!1}}),this.emit("lock")}_onStateUpdate(e){this.isClientOpenAndUnlocked=e.isUnlocked&&this._isClientOpen,this._notifyChainChange()}privateSendUpdate(){this.emit("update",this.getState())}isUnlocked(){return this.keyringController.state.isUnlocked}getExternalPendingTransactions(e){return this.smartTransactionsController.getTransactions({addressFrom:e,status:"pending"})}async getPendingNonce(e){const{nonceDetails:t,releaseLock:r}=await this.txController.getNonceLock(e),n=t.params.highestSuggested;return r(),n}async getNextNonce(e){const t=await this.txController.getNonceLock(e);return t.releaseLock(),t.nextNonce}throwTestError(e){setTimeout((()=>{const t=new Error(e);throw t.name="TestError",t}))}_addTransactionControllerListeners(){const e=this.getTransactionMetricsRequest();this.txController.hub.on("post-transaction-balance-updated",fe.handlePostTransactionBalanceUpdate.bind(null,e)),this.txController.hub.on("unapprovedTransaction",(t=>(0,fe.handleTransactionAdded)(e,{transactionMeta:t}))),this.txController.hub.on("transaction-approved",fe.handleTransactionApproved.bind(null,e)),this.txController.hub.on("transaction-dropped",fe.handleTransactionDropped.bind(null,e)),this.txController.hub.on("transaction-confirmed",fe.handleTransactionConfirmed.bind(null,e)),this.txController.hub.on("transaction-failed",fe.handleTransactionFailed.bind(null,e)),this.txController.hub.on("transaction-new-swap",(({transactionMeta:e})=>{this.swapsController.setTradeTxId(e.id)})),this.txController.hub.on("transaction-new-swap-approval",(({transactionMeta:e})=>{this.swapsController.setApproveTxId(e.id)})),this.txController.hub.on("transaction-rejected",fe.handleTransactionRejected.bind(null,e)),this.txController.hub.on("transaction-submitted",fe.handleTransactionSubmitted.bind(null,e)),this.txController.hub.on("transaction-status-update",(({transactionMeta:e})=>{this._onFinishedTransaction(e)}))}getTransactionMetricsRequest(){return{...{createEventFragment:this.metaMetricsController.createEventFragment.bind(this.metaMetricsController),finalizeEventFragment:this.metaMetricsController.finalizeEventFragment.bind(this.metaMetricsController),getEventFragmentById:this.metaMetricsController.getEventFragmentById.bind(this.metaMetricsController),getParticipateInMetrics:()=>this.metaMetricsController.state.participateInMetaMetrics,trackEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),updateEventFragment:this.metaMetricsController.updateEventFragment.bind(this.metaMetricsController),getAccountType:this.getAccountType.bind(this),getDeviceModel:this.getDeviceModel.bind(this),getEIP1559GasFeeEstimates:this.gasFeeController.fetchGasFeeEstimates.bind(this.gasFeeController),getSelectedAddress:()=>this.preferencesController.store.getState().selectedAddress,getTokenStandardAndDetails:this.getTokenStandardAndDetails.bind(this),getTransaction:e=>this.txController.state.transactions.find((t=>t.id===e))},snapAndHardwareMessenger:this.controllerMessenger.getRestricted({name:"SnapAndHardwareMessenger",allowedActions:["KeyringController:getKeyringForAccount","SnapController:get","AccountsController:getSelectedAccount"]}),provider:this.provider}}findNetworkConfigurationBy(e){const{networkConfigurations:t}=this.networkController.state;return Object.values(t).find((t=>Object.keys(e).some((r=>t[r]===e[r]))))||null}async setLedgerTransportPreference(){const e=window.navigator.hid?te.LedgerTransportTypes.webhid:te.LedgerTransportTypes.u2f,t=await this.getKeyringForDevice(te.HardwareDeviceNames.ledger);return null!=t&&t.updateTransportMethod?t.updateTransportMethod(e).catch((e=>{throw e})):undefined}recordFirstTimeInfo(e){if(!("firstTimeInfo"in e)){const t=this.platform.getVersion();e.firstTimeInfo={version:t,date:Date.now()}}}set isClientOpen(e){this._isClientOpen=e,this.detectTokensController.isOpen=e}onClientClosed(){try{this.gasFeeController.stopPolling(),this.appStateController.clearPollingTokens()}catch(e){console.error(e)}}onEnvironmentTypeClosed(e){const t=ie.POLLING_TOKEN_ENVIRONMENT_TYPES[e];this.appStateController.store.getState()[t].forEach((e=>{this.gasFeeController.disconnectPoller(e),this.appStateController.removePollingToken(e,t)}))}safelistPhishingDomain(e){return this.phishingController.bypass(e)}async backToSafetyPhishingWarning(){const e=this.platform.getExtensionURL();await this.platform.switchToAnotherURL(undefined,e)}setLocked(){return this.keyringController.setLocked()}async securityProviderRequest(e,t){const{currentLocale:r,transactionSecurityCheckEnabled:n}=this.preferencesController.store.getState();if(n){const n=Number((0,me.hexToDecimal)(this.networkController.state.providerConfig.chainId));try{return await(0,tt.securityProviderCheck)(e,t,n,r)}catch(e){throw y.default.error(e.message),e}}return null}async _onAccountChange(e){const t=(0,Ze.getPermittedAccountsByOrigin)(this.permissionController.state);for(const[r,n]of t.entries())n.includes(e)&&this._notifyAccountsChange(r,n);await this.txController.updateIncomingTransactions()}async _notifyAccountsChange(e,t){this.isUnlocked()&&this.notifyConnections(e,{method:Ze.NOTIFICATION_NAMES.accountsChanged,params:t.length<2?t:await this.getPermittedAccounts(e)}),this.permissionLogController.updateAccountsHistory(e,t)}_notifyChainChange(){this.preferencesController.getUseRequestQueue()?this.notifyAllConnections((e=>({method:Ze.NOTIFICATION_NAMES.chainChanged,params:this.getProviderNetworkState(e)}))):this.notifyAllConnections({method:Ze.NOTIFICATION_NAMES.chainChanged,params:this.getProviderNetworkState()})}async _onFinishedTransaction(e){[Y.TransactionStatus.confirmed,Y.TransactionStatus.failed].includes(e.status)&&(await this._createTransactionNotifcation(e),this._updateNFTOwnership(e),this._trackTransactionFailure(e))}async _createTransactionNotifcation(e){const{chainId:t}=e;let r={};if(t){const{networkConfigurations:e}=this.networkController.state,n=Object.values(e).find((e=>e.chainId===t));r=(null==n?void 0:n.rpcPrefs)??{}}try{await this.platform.showTransactionNotification(e,r)}catch(e){y.default.error("Failed to create transaction notification",e)}}_updateNFTOwnership(e){var t;const{type:r,txParams:n,chainId:s}=e;if(r!==Y.TransactionType.tokenMethodTransferFrom||n===undefined)return;const{data:o,to:i,from:a}=n,l=(0,ue.parseStandardTokenTransactionData)(o),c=(0,ce.getTokenIdParam)(l)??(0,pe.getTokenValueParam)(l),{allNfts:d}=this.nftController.state,u=null==d||null===(t=d[a])||void 0===t||null===(t=t[s])||void 0===t?void 0:t.find((({address:e,tokenId:t})=>(0,de.isEqualCaseInsensitive)(e,i)&&t===c));u&&this.nftController.checkAndUpdateSingleNftOwnershipStatus(u,!1,{userAddress:a})}_trackTransactionFailure(e){var t;const{txReceipt:r}=e,n=this.getState();r&&"0x0"===r.status&&this.metaMetricsController.trackEvent({event:"Tx Status Update: On-Chain Failure",category:ae.MetaMetricsEventCategory.Background,properties:{action:"Transactions",errorMessage:null===(t=e.simulationFails)||void 0===t?void 0:t.reason,numberOfTokens:n.tokens.length,numberOfAccounts:Object.keys(n.accounts).length}},{matomoEvent:!0})}_onUserOperationAdded(e){const t=this.txController.state.transactions.find((t=>t.id===e.id));t&&(t.type===Y.TransactionType.swap?this.txController.hub.emit("transaction-new-swap",{transactionMeta:t}):t.type===Y.TransactionType.swapApproval&&this.txController.hub.emit("transaction-new-swap-approval",{transactionMeta:t}))}_onUserOperationTransactionUpdated(e){e.txParams.from=this.preferencesController.getSelectedAddress();this.txController.state.transactions.some((t=>t.id===e.id))||this.txController.state.transactions.push(e),this.txController.updateTransaction(e,"Generated from user operation"),this.txController.hub.emit("transaction-status-update",{transactionMeta:e})}}r.default=pt}).call(this)}).call(this,e("buffer").Buffer)}}},{package:"$root$",file:"app/scripts/metamask-controller.js"}],[93,{lodash:3406},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");r.default={version:2,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=2;try{"etherscan"===t.data.config.provider.type&&(t.data.config.provider.type="rpc",t.data.config.provider.rpcTarget="https://rpc.metamask.io/")}catch(e){}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/002.js"}],[94,{lodash:3406},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");r.default={version:3,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=3;try{"https://rawtestrpc.metamask.io/"===t.data.config.provider.rpcTarget&&(t.data.config.provider.rpcTarget="https://testrpc.metamask.io/")}catch(e){}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/003.js"}],[95,{lodash:3406},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");r.default={version:4,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=4;try{if("rpc"!==t.data.config.provider.type)return Promise.resolve(t);switch(t.data.config.provider.rpcTarget){case"https://testrpc.metamask.io/":t.data.config.provider={type:"testnet"};break;case"https://rpc.metamask.io/":t.data.config.provider={type:"mainnet"}}}catch(e){}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/004.js"}],[96,{lodash:3406},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");r.default={version:5,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=5;try{const e=function(e){const{config:t}=e,r={...e,KeyringController:{vault:e.vault,selectedAccount:t.selectedAccount,walletNicknames:e.walletNicknames}};return delete r.vault,delete r.walletNicknames,delete r.config.selectedAccount,r}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #5${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/005.js"}],[97,{lodash:3406},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");r.default={version:6,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=6;try{const e=function(e){const t=e.KeyringController,r={...e,PreferencesController:{selectedAddress:t.selectedAccount}};return delete r.KeyringController.selectedAccount,r}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #6${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/006.js"}],[98,{lodash:3406},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");r.default={version:7,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=7;try{const e=function(e){const t={...e,TransactionManager:{transactions:e.transactions||[],gasMultiplier:e.gasMultiplier||1}};return delete t.transactions,delete t.gasMultiplier,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #7${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/007.js"}],[99,{lodash:3406},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");r.default={version:8,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=8;try{const e=function(e){const t={...e,NoticeController:{noticesList:e.noticesList||[]}};return delete t.noticesList,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #8${e.stack}`)}return Promise.resolve(t)}}}}},{package:"$root$",file:"app/scripts/migrations/008.js"}],[994,{"./utils":996,"@metamask/base-controller":1058,"@metamask/eth-snap-keyring":1112,"@metamask/keyring-api":1244,"@metamask/keyring-controller":1273,"ethereumjs-util":2798,uuid:3994},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){var n,s,o,i,a,l,c,d,u,h,p=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(s,o){function i(e){try{l(n.next(e))}catch(e){o(e)}}function a(e){try{l(n.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?s(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(i,a)}l((n=n.apply(e,t||[])).next())}))},g=this&&this.__classPrivateFieldGet||function(e,t,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!n:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(e):n?n.value:t.get(e)};Object.defineProperty(r,"__esModule",{value:!0}),r.AccountsController=void 0;const m=e("@metamask/base-controller"),C=e("@metamask/eth-snap-keyring"),f=e("@metamask/keyring-api"),y=e("@metamask/keyring-controller"),w=e("ethereumjs-util"),k=e("uuid"),b=e("./utils"),v="AccountsController",S={internalAccounts:{persist:!0,anonymous:!1}},A={internalAccounts:{accounts:{},selectedAccount:""}};class T extends m.BaseController{constructor({messenger:e,state:t}){super({messenger:e,name:v,metadata:S,state:Object.assign(Object.assign({},A),t)}),n.add(this),this.messagingSystem.subscribe("SnapController:stateChange",(e=>g(this,n,"m",l).call(this,e))),this.messagingSystem.subscribe("KeyringController:stateChange",(e=>g(this,n,"m",a).call(this,e))),g(this,n,"m",h).call(this)}getAccount(e){return this.state.internalAccounts.accounts[e]}listAccounts(){return Object.values(this.state.internalAccounts.accounts)}getAccountExpect(e){if(!e)return{id:"",address:"",options:{},methods:[],type:f.EthAccountType.Eoa,metadata:{name:"",keyring:{type:""}}};const t=this.getAccount(e);if(t===undefined)throw new Error(`Account Id ${e} not found`);return t}getSelectedAccount(){return this.getAccountExpect(this.state.internalAccounts.selectedAccount)}getAccountByAddress(e){return this.listAccounts().find((t=>t.address.toLowerCase()===e.toLowerCase()))}setSelectedAccount(e){const t=this.getAccount(e);this.update((e=>{t?(e.internalAccounts.accounts[t.id].metadata.lastSelected=Date.now(),e.internalAccounts.selectedAccount=t.id):e.internalAccounts.selectedAccount=""})),t&&this.messagingSystem.publish("AccountsController:selectedAccountChange",t)}setAccountName(e,t){const r=this.getAccountExpect(e);if(this.listAccounts().find((r=>r.metadata.name===t&&r.id!==e)))throw new Error("Account name already exists");this.update((n=>{const s=Object.assign(Object.assign({},r),{metadata:Object.assign(Object.assign({},r.metadata),{name:t})});n.internalAccounts.accounts[e]=s}))}updateAccounts(){return p(this,void 0,void 0,(function*(){const e=yield g(this,n,"m",o).call(this),t=(yield g(this,n,"m",i).call(this)).filter((t=>!e.find((e=>e.address===t.address)))),r=new Map,s=this.state.internalAccounts.accounts,a=[...t,...e].reduce(((e,t)=>{var n,o;const i=(0,b.keyringTypeToName)(t.metadata.keyring.type),a=null!==(n=r.get(i))&&void 0!==n?n:0;a?r.set(i,a+1):r.set(i,1);const l=s[t.id];return e[t.id]=Object.assign(Object.assign({},t),{metadata:Object.assign(Object.assign({},t.metadata),{name:l&&""!==l.metadata.name?l.metadata.name:`${i} ${a+1}`,lastSelected:null===(o=null==l?void 0:l.metadata)||void 0===o?void 0:o.lastSelected})}),e}),{});this.update((e=>{e.internalAccounts.accounts=a}))}))}loadBackup(e){e.internalAccounts&&this.update((t=>{t.internalAccounts=e.internalAccounts}))}}r.AccountsController=T,n=new WeakSet,s=function(e,t){return{id:(0,b.getUUIDFromAddressOfNormalAccount)(e),address:e,options:{},methods:[f.EthMethod.PersonalSign,f.EthMethod.Sign,f.EthMethod.SignTransaction,f.EthMethod.SignTypedDataV1,f.EthMethod.SignTypedDataV3,f.EthMethod.SignTypedDataV4],type:f.EthAccountType.Eoa,metadata:{name:"",keyring:{type:t}}}},o=function(){return p(this,void 0,void 0,(function*(){const[e]=this.messagingSystem.call("KeyringController:getKeyringsByType",C.SnapKeyring.type);if(!e)return[];return e.listAccounts()}))},i=function(){return p(this,void 0,void 0,(function*(){const e=yield this.messagingSystem.call("KeyringController:getAccounts"),t=[];for(const r of e){const e=yield this.messagingSystem.call("KeyringController:getKeyringForAccount",r),n={random:(0,w.sha256FromString)(r).slice(0,16)};t.push({id:(0,k.v4)(n),address:r,options:{},methods:[f.EthMethod.PersonalSign,f.EthMethod.Sign,f.EthMethod.SignTransaction,f.EthMethod.SignTypedDataV1,f.EthMethod.SignTypedDataV3,f.EthMethod.SignTypedDataV4],type:f.EthAccountType.Eoa,metadata:{name:"",keyring:{type:e.type}}})}return t.filter((e=>e.metadata.keyring.type!==y.KeyringTypes.snap))}))},a=function(e){if(e.isUnlocked&&e.keyrings.length>0){const t=[],r=[];for(const n of e.keyrings)n.type===y.KeyringTypes.snap?r.push(...n.accounts.map((e=>({address:e,type:n.type})))):t.push(...n.accounts.map((e=>({address:e,type:n.type}))));const{previousNormalInternalAccounts:s,previousSnapInternalAccounts:o}=this.listAccounts().reduce(((e,t)=>(t.metadata.keyring.type===y.KeyringTypes.snap?e.previousSnapInternalAccounts.push(t):e.previousNormalInternalAccounts.push(t),e)),{previousNormalInternalAccounts:[],previousSnapInternalAccounts:[]}),i=[],a=[];for(const e of t)this.state.internalAccounts.accounts[(0,b.getUUIDFromAddressOfNormalAccount)(e.address)]||i.push(e);for(const e of r)o.find((t=>t.address.toLowerCase()===e.address.toLowerCase()))||i.push(e);for(const e of s)t.find((({address:t})=>t.toLowerCase()===e.address.toLowerCase()))||a.push(e);for(const e of o)r.find((({address:t})=>t.toLowerCase()===e.address.toLowerCase()))||a.push(e);if(a.length>0)for(const e of a)g(this,n,"m",u).call(this,e.id);if(i.length>0)for(const e of i)g(this,n,"m",d).call(this,e);if(!this.getAccount(this.state.internalAccounts.selectedAccount)){const[e]=this.listAccounts().sort(((e,t)=>{var r,n;return(null!==(r=t.metadata.lastSelected)&&void 0!==r?r:0)-(null!==(n=e.metadata.lastSelected)&&void 0!==n?n:0)}));this.setSelectedAccount(null==e?void 0:e.id)}}},l=function(e){const{snaps:t}=e,r=this.listAccounts().filter((e=>e.metadata.snap));this.update((e=>{r.forEach((r=>{const n=e.internalAccounts.accounts[r.id];if(n.metadata.snap){const e=n.metadata.snap.id,r=t[e];r&&(n.metadata.snap.enabled=r.enabled&&!r.blocked)}}))}))},c=function(e){const t=(0,b.keyringTypeToName)(e),r=this.listAccounts().filter((t=>e===y.KeyringTypes.hd||e===y.KeyringTypes.simple?t.metadata.keyring.type===y.KeyringTypes.hd||t.metadata.keyring.type===y.KeyringTypes.simple:t.metadata.keyring.type===e)),n=r.filter((e=>new RegExp(`${t} \\d+$`,"u").test(e.metadata.name))).map((e=>{const t=e.metadata.name.split(" ");return parseInt(t[t.length],10)})).sort(((e,t)=>t-e))[0]||0,s=Math.max(r.length+1,n+1);return{accountPrefix:t,indexToUse:s}},d=function(e){let t;if(e.type!==y.KeyringTypes.snap)t=g(this,n,"m",s).call(this,e.address,e.type);else{const[r]=this.messagingSystem.call("KeyringController:getKeyringsByType",C.SnapKeyring.type);if(t=r.getAccountByAddress(e.address),!t)return}const{accountPrefix:r,indexToUse:o}=g(this,n,"m",c).call(this,t.metadata.keyring.type),i=`${r} ${o}`;this.update((e=>{e.internalAccounts.accounts[t.id]=Object.assign(Object.assign({},t),{metadata:Object.assign(Object.assign({},t.metadata),{name:i,lastSelected:Date.now()})})})),this.setSelectedAccount(t.id)},u=function(e){this.update((t=>{delete t.internalAccounts.accounts[e]}))},h=function(){this.messagingSystem.registerActionHandler(`${v}:setSelectedAccount`,this.setSelectedAccount.bind(this)),this.messagingSystem.registerActionHandler(`${v}:listAccounts`,this.listAccounts.bind(this)),this.messagingSystem.registerActionHandler(`${v}:setAccountName`,this.setAccountName.bind(this)),this.messagingSystem.registerActionHandler(`${v}:updateAccounts`,this.updateAccounts.bind(this)),this.messagingSystem.registerActionHandler(`${v}:getSelectedAccount`,this.getSelectedAccount.bind(this)),this.messagingSystem.registerActionHandler(`${v}:getAccountByAddress`,this.getAccountByAddress.bind(this)),this.messagingSystem.registerActionHandler("AccountsController:getAccount",this.getAccount.bind(this))}}}},{package:"@metamask/accounts-controller",file:"node_modules/@metamask/accounts-controller/dist/AccountsController.js"}],[995,{"./AccountsController":994,"./utils":996},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){n===undefined&&(n=r);var s=Object.getOwnPropertyDescriptor(t,r);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,s)}:function(e,t,r,n){n===undefined&&(n=r),e[n]=t[r]}),s=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(r,"__esModule",{value:!0}),s(e("./AccountsController"),r),s(e("./utils"),r)}}},{package:"@metamask/accounts-controller",file:"node_modules/@metamask/accounts-controller/dist/index.js"}],[996,{"@metamask/keyring-controller":1273,"ethereumjs-util":2798,uuid:3994},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.getUUIDFromAddressOfNormalAccount=r.keyringTypeToName=void 0;const n=e("@metamask/keyring-controller"),s=e("ethereumjs-util"),o=e("uuid");r.keyringTypeToName=function(e){if(/^Custody.*/.test(e))return"Custody";switch(e){case n.KeyringTypes.simple:case n.KeyringTypes.hd:return"Account";case n.KeyringTypes.trezor:return"Trezor";case n.KeyringTypes.ledger:return"Ledger";case n.KeyringTypes.lattice:return"Lattice";case n.KeyringTypes.qr:return"QR";case n.KeyringTypes.snap:return"Snap Account";case n.KeyringTypes.custody:return"Custody";default:throw new Error(`Unknown keyring ${e}`)}},r.getUUIDFromAddressOfNormalAccount=function(e){const t={random:(0,s.sha256FromString)(e).slice(0,16)};return(0,o.v4)(t)}}}},{package:"@metamask/accounts-controller",file:"node_modules/@metamask/accounts-controller/dist/utils.js"}],[997,{"@metamask/base-controller":1002,"@metamask/controller-utils":1004},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.AddressBookController=r.AddressType=void 0;const n=e("@metamask/controller-utils"),s=e("@metamask/base-controller");!function(e){e.externallyOwnedAccounts="EXTERNALLY_OWNED_ACCOUNTS",e.contractAccounts="CONTRACT_ACCOUNTS",e.nonAccounts="NON_ACCOUNTS"}(r.AddressType||(r.AddressType={}));class o extends s.BaseController{constructor(e,t){super(e,t),this.name="AddressBookController",this.defaultState={addressBook:{}},this.initialize()}clear(){this.update({addressBook:{}})}delete(e,t){if(t=(0,n.toChecksumHexAddress)(t),!(0,n.isValidHexAddress)(t)||!this.state.addressBook[e]||!this.state.addressBook[e][t])return!1;const r=Object.assign({},this.state.addressBook);return delete r[e][t],0===Object.keys(r[e]).length&&delete r[e],this.update({addressBook:r}),!0}set(e,t,r=(0,n.toHex)(1),s="",o){if(e=(0,n.toChecksumHexAddress)(e),!(0,n.isValidHexAddress)(e))return!1;const i={address:e,chainId:r,isEns:!1,memo:s,name:t,addressType:o},a=(0,n.normalizeEnsName)(t);return a&&(i.name=a,i.isEns=!0),this.update({addressBook:Object.assign(Object.assign({},this.state.addressBook),{[r]:Object.assign(Object.assign({},this.state.addressBook[r]),{[e]:i})})}),!0}}r.AddressBookController=o,r.default=o}}},{package:"@metamask/address-book-controller",file:"node_modules/@metamask/address-book-controller/dist/AddressBookController.js"}],[998,{"./AddressBookController":997},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){n===undefined&&(n=r);var s=Object.getOwnPropertyDescriptor(t,r);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,s)}:function(e,t,r,n){n===undefined&&(n=r),e[n]=t[r]}),s=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(r,"__esModule",{value:!0}),s(e("./AddressBookController"),r)}}},{package:"@metamask/address-book-controller",file:"node_modules/@metamask/address-book-controller/dist/index.js"}],[999,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.BaseController=void 0;class n{constructor(e={},t={}){this.defaultConfig={},this.defaultState={},this.disabled=!1,this.name="BaseController",this.internalConfig=this.defaultConfig,this.internalState=this.defaultState,this.internalListeners=[],this.initialState=t,this.initialConfig=e}initialize(){return this.internalState=this.defaultState,this.internalConfig=this.defaultConfig,this.configure(this.initialConfig),this.update(this.initialState),this}get config(){return this.internalConfig}get state(){return this.internalState}configure(e,t=!1,r=!0){if(r){this.internalConfig=t?e:Object.assign(this.internalConfig,e);for(const e in this.internalConfig)void 0!==this.internalConfig[e]&&(this[e]=this.internalConfig[e])}else for(const t in e)void 0!==this.internalConfig[t]&&(this.internalConfig[t]=e[t],this[t]=e[t])}notify(){this.disabled||this.internalListeners.forEach((e=>{e(this.internalState)}))}subscribe(e){this.internalListeners.push(e)}unsubscribe(e){const t=this.internalListeners.findIndex((t=>e===t));return t>-1&&this.internalListeners.splice(t,1),t>-1}update(e,t=!1){this.internalState=t?Object.assign({},e):Object.assign({},this.internalState,e),this.notify()}}r.BaseController=n,r.default=n}}},{package:"@metamask/address-book-controller>@metamask/base-controller",file:"node_modules/@metamask/address-book-controller/node_modules/@metamask/base-controller/dist/BaseController.js"}],[4,{"../../shared/constants/app":4047,"../../shared/constants/metametrics":4057,"../../shared/modules/browser-runtime.utils":4081,"../../shared/modules/mv3.utils":4091,"../../shared/modules/object.utils":4093,"./first-time-state":28,"./lib/createStreamSink":43,"./lib/ens-ipfs/setup":49,"./lib/get-first-preferred-lang-code":51,"./lib/getObjStructure":52,"./lib/local-store":55,"./lib/migrator":58,"./lib/network-store":59,"./lib/notification-manager":60,"./lib/setup-initial-state-hooks":82,"./lib/setupSentry":83,"./lib/util":91,"./metamask-controller":92,"./migrations":209,"./platforms/extension":210,"@metamask/controller-utils":1063,"@metamask/obs-store":1395,"@metamask/utils":1769,"debounce-stream":2651,"end-of-stream":2691,"eth-rpc-errors":2754,events:2838,"extension-port-stream":2841,loglevel:3416,pump:3593,"webextension-polyfill":4029},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.loadStateFromPersistence=le,r.setupController=de,r.statePersistenceEvents=void 0,e("./lib/setup-initial-state-hooks");var n=F(e("events")),s=F(e("end-of-stream")),o=F(e("pump")),i=F(e("debounce-stream")),a=F(e("loglevel")),l=F(e("webextension-polyfill")),c=e("@metamask/obs-store"),d=e("@metamask/utils"),u=e("@metamask/controller-utils"),h=F(e("extension-port-stream")),p=e("eth-rpc-errors"),g=e("../../shared/constants/app"),m=e("../../shared/constants/metametrics"),C=e("../../shared/modules/browser-runtime.utils"),f=e("../../shared/modules/mv3.utils"),y=e("../../shared/modules/object.utils"),w=F(e("./migrations")),k=F(e("./lib/migrator")),b=F(e("./platforms/extension")),v=F(e("./lib/local-store")),S=(F(e("./lib/network-store")),e("./lib/setupSentry")),A=F(e("./lib/createStreamSink")),T=O(e("./lib/notification-manager")),M=O(e("./metamask-controller")),P=F(e("./first-time-state")),E=F(e("./lib/get-first-preferred-lang-code")),N=F(e("./lib/getObjStructure")),R=F(e("./lib/ens-ipfs/setup")),I=e("./lib/util");function _(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(_=function(e){return e?r:t})(e)}function O(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var r=_(t);if(r&&r.has(e))return r.get(e);var n={__proto__:null},s=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if("default"!==o&&Object.prototype.hasOwnProperty.call(e,o)){var i=s?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,r&&r.set(e,n),n}function F(e){return e&&e.__esModule?e:{default:e}}const L=new v.default;global.stateHooks.getMostRecentPersistedState=()=>L.mostRecentRetrievedState;const{sentry:x}=global,U={...P.default},D={[g.ENVIRONMENT_TYPE_POPUP]:!0,[g.ENVIRONMENT_TYPE_NOTIFICATION]:!0,[g.ENVIRONMENT_TYPE_FULLSCREEN]:!0},B=["trezor-connect"];a.default.setLevel("info",!1);const j=new b.default,q=new T.default;let K=!1,G=!1,$=!1;const H={},V={};let W,z;const Q={};const Y=new URL("https://metamask.github.io/phishing-warning/v3.0.3/"),J=1e3,X=r.statePersistenceEvents=new n.default,{promise:Z,resolve:ee,reject:te}=(0,I.deferredPromise)(),re=async()=>{const e=await l.default.tabs.query({url:"<all_urls>",windowType:"normal"}).then((e=>((0,C.checkForLastErrorAndLog)(),e))).catch((()=>{(0,C.checkForLastErrorAndLog)()}));for(const t of e)l.default.tabs.sendMessage(t.id,{name:g.EXTENSION_MESSAGES.READY}).then((()=>{(0,C.checkForLastErrorAndLog)()})).catch((()=>{(0,C.checkForLastErrorAndLog)()}))};let ne,se;function oe(){const e=(new Date).toISOString();l.default.storage.session.set({timestamp:e})}async function ie(){try{const e=await le(),t=e.data,r=await(0,E.default)();let n;if(f.isManifestV3){const e=2e3;oe(),setInterval(oe,e);const t=await l.default.storage.session.get(["isFirstMetaMaskControllerSetup"]);n=(null==t?void 0:t.isFirstMetaMaskControllerSetup)===undefined,await l.default.storage.session.set({isFirstMetaMaskControllerSetup:n})}de(t,r,{},n,e.meta),f.isManifestV3||await async function(){let e;try{const t=new URL("https://metamask.github.io/phishing-warning/v3.0.3/");let r,n;t.hash="#extensionStartup",e=window.document.createElement("iframe"),e.setAttribute("src",t.href),e.setAttribute("sandbox","allow-scripts allow-same-origin");const s=new Promise(((e,t)=>{r=e,n=t}));e.addEventListener("load",r),window.document.body.appendChild(e),setTimeout((()=>n(new ae)),J),await s}catch(e){e instanceof ae?console.warn("Phishing warning page timeout; page not guaranteed to work offline."):console.error("Failed to initialize phishing warning page",e)}finally{e&&e.remove()}}(),await re(),a.default.info("MetaMask initialization complete."),ee()}catch(e){te(e)}}l.default.runtime.onConnect.addListener((async(...e)=>{await Z,ne(...e)})),l.default.runtime.onConnectExternal.addListener((async(...e)=>{await Z,se(...e)}));class ae extends Error{constructor(){super("Timeout failed")}}async function le(){const e=new k.default({migrations:w.default});if(e.on("error",console.warn),z=await L.get()||e.generateInitialState(U),z&&!z.data&&(z=e.generateInitialState(U),x.captureMessage("MetaMask - Empty vault found - unable to recover")),e.on("error",(e=>{const t=(0,N.default)(z);x.captureException(e,{extra:{vaultStructure:t}})})),z=await e.migrateData(z),!z)throw new Error("MetaMask - migrator returned undefined");if(!(0,d.isObject)(z.meta))throw new Error(`MetaMask - migrator metadata has invalid type '${typeof z.meta}'`);if("number"!=typeof z.meta.version)throw new Error(`MetaMask - migrator metadata version has invalid type '${typeof z.meta.version}'`);if(!(0,d.isObject)(z.data))throw new Error(`MetaMask - migrator data has invalid type '${typeof z.data}'`);return L.setMetadata(z.meta),L.set(z.data),z}function ce(e,t,r){if(!(0,d.hasProperty)(t.permissions,"eth_accounts"))return;const n=Object.keys(r.store.getState().identities).length,s=t.permissions.eth_accounts.caveats;if(s){const t=s[0].value.length;W.metaMetricsController.trackEvent({event:m.MetaMetricsEventName.DappViewed,category:m.MetaMetricsEventCategory.InpageProvider,referrer:{url:e},properties:{is_first_visit:!1,number_of_accounts:n,number_of_accounts_connected:t}})}}function de(e,t,r,n,d){var C;W=new M.default({infuraProjectId:"b6bf7d3508c941499b10025c0776eaf8",showUserConfirmation:ue,initState:e,initLangCode:t,platform:j,notificationManager:q,browser:l.default,getRequestAccountTabIds:()=>V,getOpenMetamaskTabsIds:()=>H,localStore:L,overrides:r,isFirstMetaMaskControllerSetup:n,currentMigrationVersion:d.version,featureFlags:{}}),(0,R.default)({getCurrentChainId:()=>W.networkController.state.providerConfig.chainId,getIpfsGateway:W.preferencesController.getIpfsGateway.bind(W.preferencesController),getUseAddressBarEnsResolution:()=>W.preferencesController.store.getState().useAddressBarEnsResolution,provider:W.provider}),(0,o.default)((0,c.storeAsStream)(W.store),(0,i.default)(1e3),(0,A.default)((async e=>{await L.set(e),X.emit("state-persisted",e)})),(e=>{a.default.error("MetaMask - Persistence pipeline failed",e)})),C=W,global.stateHooks.getSentryAppState=function(){const e=C.memStore.getState();return(0,y.maskObject)(e,S.SENTRY_BACKGROUND_STATE)};const w=()=>K||Boolean(Object.keys(H).length)||G,k=(e,t)=>{if(!1===e)W.onClientClosed();else{if(t===g.ENVIRONMENT_TYPE_FULLSCREEN&&Boolean(Object.keys(H).length))return;W.onEnvironmentTypeClosed(t)}};function b(){let e="";const t=v();t&&(e=String(t)),f.isManifestV3?(l.default.action.setBadgeText({text:e}),l.default.action.setBadgeBackgroundColor({color:"#037DD6"})):(l.default.browserAction.setBadgeText({text:e}),l.default.browserAction.setBadgeBackgroundColor({color:"#037DD6"}))}function v(){let e=W.appStateController.waitingForUnlock.length;return W.preferencesController.getUseRequestQueue()?e+=W.queuedRequestController.length():e+=W.approvalController.getTotalApprovalCount(),e}ne=async e=>{var t;const n=e.name;if(B.includes(e.name))return;let o=!1;const i=(0,I.getPlatform)(),a=null!==(t=e.sender)&&void 0!==t&&t.url?new URL(e.sender.url):null;if(o=i===g.PLATFORM_FIREFOX?D[n]:(null==a?void 0:a.origin)===`chrome-extension://${l.default.runtime.id}`,o){var c;const t=(null==r||null===(c=r.getPortStream)||void 0===c?void 0:c.call(r,e))||new h.default(e);if(W.isClientOpen=!0,W.setupTrustedCommunication(t,e.sender),n===g.ENVIRONMENT_TYPE_POPUP&&(K=!0,(0,s.default)(t,(()=>{K=!1;const e=w();W.isClientOpen=e,k(e,g.ENVIRONMENT_TYPE_POPUP)}))),n===g.ENVIRONMENT_TYPE_NOTIFICATION&&(G=!0,(0,s.default)(t,(()=>{G=!1;const e=w();W.isClientOpen=e,k(e,g.ENVIRONMENT_TYPE_NOTIFICATION)}))),n===g.ENVIRONMENT_TYPE_FULLSCREEN){const r=e.sender.tab.id;H[r]=!0,(0,s.default)(t,(()=>{delete H[r];const e=w();W.isClientOpen=e,k(e,g.ENVIRONMENT_TYPE_FULLSCREEN)}))}}else if(a&&a.origin===Y.origin&&a.pathname===Y.pathname){var d;const t=(null==r||null===(d=r.getPortStream)||void 0===d?void 0:d.call(r,e))||new h.default(e);W.setupPhishingCommunication({connectionStream:t})}else{if(e.sender&&e.sender.tab&&e.sender.url){const t=e.sender.tab.id,r=new URL(e.sender.url),{origin:n}=r;Object.keys(Q).includes(t)||(Q[t]=n);const s=W.permissionController.state.subjects[n],o=s!==undefined,i="New Tab"!==e.sender.tab.title;o&&i&&ce(n,s,W.preferencesController),e.onMessage.addListener((e=>{e.data&&e.data.method===g.MESSAGE_TYPE.ETH_REQUEST_ACCOUNTS&&(V[n]=t)}))}se(e)}},se=e=>{var t;const n=(null==r||null===(t=r.getPortStream)||void 0===t?void 0:t.call(r,e))||new h.default(e);W.setupUntrustedCommunication({connectionStream:n,sender:e.sender})},null!=r&&r.registerConnectListeners&&r.registerConnectListeners(ne,se),b(),W.decryptMessageController.hub.on(M.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,b),W.encryptionPublicKeyController.hub.on(M.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,b),W.signatureController.hub.on(M.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,b),W.appStateController.on(M.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,b),W.controllerMessenger.subscribe(M.METAMASK_CONTROLLER_EVENTS.APPROVAL_STATE_CHANGE,b),W.txController.initApprovals(),W.controllerMessenger.subscribe("QueuedRequestController:countChanged",(e=>{b(),e>0&&ue()})),q.on(T.NOTIFICATION_MANAGER_EVENTS.POPUP_CLOSED,(({automaticallyClosed:e})=>{W.preferencesController.getUseRequestQueue()||(e?v()>0&&ue():(W.signatureController.rejectUnapproved(m.REJECT_NOTIFICATION_CLOSE_SIG),W.decryptMessageController.rejectUnapproved(m.REJECT_NOTIFICATION_CLOSE),W.encryptionPublicKeyController.rejectUnapproved(m.REJECT_NOTIFICATION_CLOSE),Object.values(W.approvalController.state.pendingApprovals).forEach((({id:e,type:t})=>{switch(t){case u.ApprovalType.SnapDialogAlert:case u.ApprovalType.SnapDialogPrompt:W.approvalController.accept(e,null);break;case u.ApprovalType.SnapDialogConfirmation:case g.SNAP_MANAGE_ACCOUNTS_CONFIRMATION_TYPES.confirmAccountCreation:case g.SNAP_MANAGE_ACCOUNTS_CONFIRMATION_TYPES.confirmAccountRemoval:case g.SNAP_MANAGE_ACCOUNTS_CONFIRMATION_TYPES.showSnapAccountRedirect:W.approvalController.accept(e,!1);break;default:W.approvalController.reject(e,p.ethErrors.provider.userRejectedRequest())}}))),b())})),Object.keys(W.snapController.state.snaps).length>0&&W.snapController.updateBlockedSnaps()}async function ue(){const e=await j.getActiveTabs(),t=Boolean(e.find((e=>H[e.id]))),r=e.length>0&&e[0].extData&&e[0].extData.indexOf("vivaldi_tab")>-1;if(!$&&(r||!K)&&!t){$=!0;try{const e=W.appStateController.getCurrentPopupId();await q.showPopup((e=>W.appStateController.setCurrentPopupId(e)),e)}finally{$=!1}}}const he=()=>{if(W)return W.metaMetricsController.updateTraits({[m.MetaMetricsUserTrait.InstallDateExt]:(new Date).toISOString().split("T")[0]}),void W.metaMetricsController.addEventBeforeMetricsOptIn({category:m.MetaMetricsEventCategory.App,event:m.MetaMetricsEventName.AppInstalled,properties:{}});setTimeout((()=>{he()}),1e3)};async function pe(){Boolean(await L.get())||(he(),j.openExtensionInBrowser()),l.default.tabs.onActivated.addListener((e=>{if(W){const{tabId:t}=e,r=Q[t];if(r){const e=W.permissionController.state.subjects[r];e!==undefined&&ce(r,e,W.preferencesController)}}}))}(async function(){await pe(),ie().catch(a.default.error)})()}}},{package:"$root$",file:"app/scripts/background.js"}]],[4],{});